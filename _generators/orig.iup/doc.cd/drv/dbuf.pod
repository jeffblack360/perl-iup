=head1 CD_DBUFFER - Double Buffer Driver using a server image
(cddbuf.h)

Implements the concept of offscreen drawing. It is based on a Server
Image (the back buffer) and a Window canvas (the front buffer).

=head2 Use

The canvas is created by means of a call to function L<
B<cdCreateCanvas>|../func/init.html#cdCreateCanvas>(CD_DBUFFER, Data),
after which other functions in the CD library can be called as usual.
This function creates a CD canvas to use with an existing window canvas
(Native Windows or IUP). The parameter Data is a pointer to the already
created canvas.

Any amount of such canvases may exist simultaneously. It is important
to note that a call to function L<
B<cdKillCanvas>|../func/init.html#cdKillCanvas> is required to properly
B<end> the driver. Call function L<
B<cdKillCanvas>|../func/init.html#cdKillCanvas> for this driver before
calling B<cdKillCanvas> for the window driver.

The drawing functions will work normally as if they were drawn on the
server image driver. When function B< L<
cdCanvasFlush|../func/control.html#cdFlush>> is executed, the image is
drawn in the window canvas passed as parameter in the canvas creation.

When the window's size changes, the server image is automatically
recreated using the same size as the canvas. This is done in the
function B< L< cdCanvasActivate|../func/init.html#cdActivate>>.

We suggest you to implement rubber bands using XOR directly on the
front buffer.

=head2 Behavior of Functions

This driver depends on the L<Native Window|native.html> driver.

=head2 Control

=over

=item * L<B<Flush>|../func/control.html#cdFlush>: draws the contents of
the image into the window. It is affected by B< Origin> and
B<Clipping>, but not by B<WriteMode>.

=back

=cut