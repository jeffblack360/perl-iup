=head1 IupGLButton (since 3.11)

Creates an embedded OpenGL interface element that is a button. When
selected, this element activates a function in the application. Its
visual presentation can contain a text and/or an image. It inherits
from L<IupGLLabel|iupgllabel.html>. It exists only inside an
L<IupGLCanvasBox|iupglcanvasbox.html>.

=head2 Creation

 Ihandle* IupGLButton(const char *title); [in C]iup.glbutton{[title = title: string]} -> elem: ihandle [in Lua]glbutton(title) [in LED]

B<title>: Text to be shown to the user. It can be NULL. It will set the
TITLE attribute.

Returns: the identifier of the created element, or NULL if an error
occurs.

=head2 Attributes

The B<IupGLButton> element handle all attributes defined for the
L<IupGLLabel|iupgllabel.html> control, and consequently for the
L<IupGLSubCanvas|iupglsubcanvas.html> control too.

=head2 Callbacks

The B<IupGLButton> element handle all callbacks defined for the
B<IupGLSubCanvas> control.

=over

----

=back

L<ACTION|../call/iup_action.html>: Action generated when the button 1
(usually left) is selected. This callback is called only after the
mouse is released and when it is released inside the button area.

 int function(Ihandle* ih); [in C]elem:action() -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

Returns: IUP_CLOSE will be processed.

=head2 Notes

The difference between a B<IupGLButton> and a B< IupGLLabel> is the
border (controlled by B<IupGLSubCanvas> attributes BORDERWIDTH and
BORDERCOLOR), the change in background color for state feedback
(controlled by PRESSCOLOR and HLCOLOR attributes), and the callback to
notify the application.

The natural size if the same as a B<IupGLLabel> plus BORDERWIDTH.

=head2 X<SeeAlso>See Also

L<IupImage|../elem/iupimage.html>, L<IupGLToggle|iupgltoggle.html>,
L<IupGLLabel|iupgllabel.html>

=cut