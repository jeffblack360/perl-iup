=head1 IupScintilla (since 3.8)

Creates a multiline source code text editor that uses the Scintilla
library.

Scintilla is a free library that provides text-editing functions, with
an emphasis on advanced features for source code editing. It comes with
complete source code and a L<license|scintilla.txt> that permits use in
any free project or commercial product, and it is available on L<
http:E<47>E<47>www.scintilla.orgE<47>|http://www.scintilla.org/>.
IupScintilla library includes the Scintilla 3.3.5 source code, so no
external references are needed.

Supported in Windows and in the systems the GTK driver is supported.

=head2 Initialization and Usage

The B<IupScintillaOpen> function must be called after a B<IupOpen>, so
that the control can be used. The "iup_scintilla.h" file must also be
included in the source code. The program must be linked to the controls
library (iup_scintilla), and with the "imm32.lib" library in Windows.

To make the control available in Lua use require"iuplua_scintilla" or
manually call the initialization function in C,
B<iupscintillalua_open>, after calling B<iuplua_open>. When manually
calling the function the iuplua_scintilla.h file must also be included
in the source code and the program must be linked to the Lua control
library (iuplua_scintilla).

=head2 Creation

 Ihandle* IupScintilla(void); [in C]iup.scintilla{} -> (elem: ihandle) [in Lua]scintilla(action) [in LED]

This function returns the identifier of the created editing component,
or NULL if an error occurs.

=head2 Attributes

=head2 General

B<BORDER >(creation only): Shows a border around the text. Default:
"YES".

B<CANFOCUS> (creation only) (non inheritable): enables the focus
traversal of the control. In Windows the control will still get the
focus when clicked. Default: YES.

B<CLIPBOARD> (non inheritable): clear, cut, copy or paste the selection
to or from the clipboard. Values: "CLEAR", "CUT", "COPY", "PASTE".
Returns Yes or No, if data can be pasted from the clipboard.

B<CURSOR> (non inheritable): defines the cursor type. Can be: "NORMAL"
or "WAIT" (displays a wait cursor when the mouse is over or owned by
the control).

B<DROPFILESTARGET> [Windows and GTK Only] (non inheritable): Enable or
disable the drop of files. Default: NO, but if DROPFILES_CB is defined
when the element is mapped then it will be automatically enabled.

B<KEYSUNICODE> [Windows Only] (non inheritable): allow processing of
Unicode typed characters. Default: NO. (since 3.9)

B<OVERWRITE> (non inheritable): turns the overwrite mode ON or OFF.
When enabled, each typed character replaces the character to the right
of the text caret. When disabled, characters are inserted at the caret.

B<READONLY >(non inheritable): Allows the user only to read the
contents, without changing it. Restricts the insertion using keyboard
input and attributes. Navigation keys are still available. Possible
values: "YES" and "NO". Default: NO.

B<X<SAVEDSTATE>SAVEDSTATE> (non inheritable): sets the current state of
the document to saved (given value is ignored), returns Yes or No if
the document has been modified. After setting the SAVEDSTATE, when
editing is done the L< SAVEPOINT_CB|#SAVEPOINT_CB> callback is called
with status=0. When undo is performed back to the point were the saved
state was set the callback is called again with status=1.

L<SIZE|../attrib/iup_size.html> (non inheritable): Since the contents
can be changed by the user, the B<Natural> B<Size> is not affected by
the text contents. In IUP 2.x the B<Natural> B<Size> was defined by the
number of lines in the text and the with of the largest line. For IUP
3, use VISIBLECOLUMNS and VISIBLELINES to control the B<Natural Size>.

B<USEPOPUP> (non inheritable): allows to disable the default editing
menu shown when the user clicks with the right button. Default: Yes.

B<VISIBLECOLUMNS>: Defines the number of visible columns for the
B<Natural> B<Size>, this means that will act also as minimum number of
visible columns. It uses a wider character size then the one used for
the SIZE attribute so strings will fit better without the need of extra
columns. As for SIZE you can set to NULL after map to use it as an
initial value. Default: 50.

B<VISIBLELINES>: Defines the number of visible lines for the B<Natural>
B<Size>, this means that will act also as minimum number of visible
lines. As for SIZE you can set to NULL after map to use it as an
initial value. Default: 10.

B<VISIBLELINESCOUNT> (non inheritable, read-only): returns the number
of actual visible lines.

B<WORDWRAP> (non inheritable): If enabled will force a word wrap of
lines that are greater than the with of the control, and the horizontal
scrollbar will be removed. Default: NO.

B<WORDWRAPVISUALFLAGS> (non inheritable): enable the drawing of visual
flags to indicate a line is wrapped. Can be: MARGIN (at the line number
margin), START (start of wrapped line), END (end of wrapped line) or
NONE. Default: NONE.

=head2 Text Retrieval and Modification

B<APPEND> (non inheritable, write-only): Inserts a text at the B<end>
of the current text. If APPENDNEWLINE=YES, a "\n" character will be
automatically inserted before the appended text if the current text is
not empty (APPENDNEWLINE default is YES).

B<CHARI<id>> (non inheritable, read-only): returns the character at a
given position, considering the "id" as the position.

B<CLEARALL> (non inheritable, write-only): deletes all the text (unless
the document is read-only).

B<COUNT> (non inheritable, read-only): returns the number of characters
in the text.

B<DELETERANGE> (non inheritable, write-only): Deletes a range of text
in the document. It uses a string format "B<pos,len>" in order to
indicate the start position and text length to delete.

B<INSERTI<id>> (non inheritable, write-only): Inserts a text string at
position "id" or at the current position if pos is -1 or omitted. If
the current position is after the insertion point then it is moved
along with its surrounding text but no scrolling is performed.

B<LINEI<id>> (non inheritable, read-only): returns the text of the
line, considering the "id" as the line number. It does not include the
"\n" character. Number lines starts at 0.

B<LINECOUNT> (non inheritable, read-only): returns the number of lines
in the text.

B<LINEVALUE> (non inheritable, read-only): returns the text of the line
where the caret is. It does not include the "\n" character.

B<PREPEND> (non inheritable, write-only): Inserts a text at the
B<begin> of the current text. If APPENDNEWLINE=YES, a "\n" character
will be automatically inserted after the prepended text if the current
text is not empty (APPENDNEWLINE default is YES).

B<VALUE >(non inheritable): Text entered by the user. The "\n"
character indicates a new line. After the element is mapped and if
there is no text will return the empty string "". This replaces all the
text in the document with the zero terminated text string you pass in.

=head2 Annotation

B<ANNOTATIONTEXT>B<B<I<id>> >(non inheritable): defines and returns an
annotation displayed underneath a specific line, considering the "id"
as the line number. An annotation may consist of multiple lines
separated by '\n'.

B<ANNOTATIONSTYLE>B<B<I<id>> >(non inheritable): sets and gets a
particular style to the annotation, considering the "id" as the line
number.

B<ANNOTATIONSTYLEOFFSET> (non inheritable): sets and gets a style
offset, in order to separate standard text styles from annotation
styles.

B<ANNOTATIONVISIBLE> (non inheritable): enable or disable annotations.
Can be "HIDDEN" (not displayed), "STANDARD" (displayed) or "BOXED"
(displayed and surrounded by a box). Default HIDDEN.

B<ANNOTATIONCLEARALL> (non inheritable, write-only): deletes all
annotations.

=head2 Brace Highlighting

B<BRACEHIGHLIGHT> (non inheritable, write only): highlights the brace,
defined by its initial and final positions (format: "B<pos1>:B<pos2>").
Up to two characters can be highlighted in a 'brace highlighting
style', which is defined as style number (See L<Style
Definition|#StyleDefinition>, id = 34).

B<BRACEBADLIGHT> (non inheritable, write only): highlights the non
matching brace, based on a position. If there is no matching brace then
the brace badlighting style (See L<Style Definition|#StyleDefinition>,
id = 35) can be used to show the brace that is unmatched. Set -1 as
position removes the highlight.

B<BRACEMATCHI<id>> (non inheritable, read only): finds a corresponding
matching brace given id, the position of one brace. The brace
characters handled are '(', ')', '[', ']', '{', '}', 'E<lt>', and
'E<gt>'. If the character at position is not a brace character, or a
matching brace cannot be found, the return value is -1.

=head2 Caret and Selection

B<X<CARET>CARET> (non inheritable): Position of the insertion point.
The first position, B<lin> or B<col>, is "0". It uses a string format
"B<lin>,B<col>" in order to indicate the caret position, where B<lin>
and B<col> must be integer numbers.

When B<lin> is greater than the number of lines, the caret is placed at
the last line. When B<col> is greater than the number of characters in
the given line, the caret is placed after the last character of the
line.

If the caret is not visible the text is scrolled to make it visible.

B<X<CARETPOS>CARETPOS> (non inheritable): Position of the insertion
point using a zero based character unique index "pos". Useful for
indexing the VALUE string. This removes any selection, sets the caret
at pos and scrolls the view to make the caret visible, if necessary.

B<CARETTOVIEW> (non inheritable, write only): Moves the caret to the
nearest visible line. Any selection is lost.

B<SELECTEDTEXT> (non inheritable): Selection text. Returns NULL if
there is no selection. When changed replaces the current selection.
Similar to INSERT, but does nothing if there is no selection.

B<SELECTION> (non inheritable): Selection interval. Returns NULL if
there is no selection. The first position, B<lin> or B<col>, is "0".
The accepted format is represented by the string
"B<lin1>,B<col1>:B<lin2>,B<col2>", where B<lin1>, B<col1>, B<lin2> and
B<col2> are integer numbers corresponding to the selection's interval.
B<col2> correspond to the character after the last selected character.
The values ALL and NONE are also accepted.

B<SELECTIONPOS> (non inheritable): Same as SELECTION but using a zero
based character index "B<pos1>:B<pos2>". Useful for indexing the VALUE
string. The values ALL and NONE are also accepted.

=head2 Folding

B<FOLDFLAGS> (non inheritable, write-only): determines how folding
lines are drawn. Can be: "LEVELNUMBERS", "LINEBEFORE_EXPANDED",
"LINEBEFORE_CONTRACTED", "LINEAFTER_EXPANDED" or "LINEAFTER_CONTRACTED
" (default).

B<FOLDLEVELI<id>> (non inheritable): sets and gets the fold level of a
"id" line. Can be: "WHITEFLAG", "HEADERFLAG", "NUMBERMASK" or "BASE"
(default). If you use a lexer, it is not recommend to set the fold
level (this is far better handled by the lexer). By contrast, get fold
level is useful to decide how to handle user folding requests.

B<FOLDTOGGLE> (non inheritable, write-only): Determines if the fold
point (line number) may be either expanded, displaying all its child
lines, or contracted, hiding all the child lines.

=head2 Lexer

B<KEYWORDI<id>> (non inheritable, write-only): keyword list used by the
current lexer. Until 9 lists of keywords can set up using id from 0 to
8. The value is a list of keywords separated by spaces, tabs, "\n" or
"\r" or any combination of these.

B<KEYWORDSETS> (non inheritable, read only): returns a description of
all of the keyword sets separated by "\n".

B<LEXERLANGUAGE> (non inheritable): associate the lexer language name.
It is case sensitive. Default: not defined. Set to NULL to clear the
association. Can be: any name supported by Scintilla. For instance:
asm, bash, freebasic, cmake, COBOL, cpp (C++), css, d, diff, eiffel,
fortran, hypertext (HTML), xml, lisp, lua (Lua), makefile, matlab,
mysql, nsis, pascal, perl, python, ruby, smalltalk, sql, tcl, tex, vb
(Visual Basic), and many others.

B<PROPERTY> (non inheritable): sets and gets Lexer properties using
"name=value" string pairs, where name is case sensitive and value is
the associated string. There is no limit to the number of keyword pairs
you can set, other than available memory. To retrieve a property first
set the PROPERTYNAME attribute, the PROPERTY attribute will return its
value.

B<PROPERTYNAMES> (non inheritable, read only): returns a list of
property names separated by "\n". If the lexer does not support this
information then an empty string is returned.

=head2 Margins

B<MARGINMASKFOLDERSI<id> >(non inheritable): defines if a margin is
folding or non-folding. Can be: Yes or No.

B<MARGINSENSITIVEI<id> >(non inheritable): determines if a margin is
sensitive or not. Margins that are not sensitive act as selection
margins which make it easy to select ranges of lines. By default, all
margins are insensitive. Can be: YES or NO.

B<MARGINTYPEI<id> >(non inheritable): set and get the type of a margin.
The margin argument should be 0, 1, 2, 3 or 4. Each margin can be set
to display only symbols, line numbers, or text. You can use the
predefined values "SYMBOL", "NUMBER", "TEXT", "RTEXT" (right justify
text), "BACKGROUND" or "FOREGROUND" (the latter two used for symbol
margins that set their background or foreground using the style default
colors).

B<MARGINWIDTHI<id> >(non inheritable): width of a margin in pixels
(Default value: 0). A margin with width=0 is invisible. The margins are
numbered 0 to 4. By default, Scintilla margin 0 is set to display line
numbers, margin 1 is set to display non-folding symbols, and margin 2
is set to display folding symbols. Margins 3 and 4 are free for user
default. However, you can set the margins to be whatever you wish using
MARGINTYPEid.

B<MARGINLEFT> (non inheritable): size of the blank margin on the left
side. Default: 1.

B<MARGINRIGHT> (non inheritable): size of the blank margin on the right
side. Default: 1.

B<MARGINTEXTI<id> >(non inheritable): controls the text of each line of
a text margin. id is the line number.

B<MARGINTEXTSTYLEI<id> >(non inheritable): controls the style of the
text of each line of a text margin. id is the line number.

B<MARGINTEXTCLEARALL> (non inheritable, write-only): clear all text and
styles of a text margin.

B<MARGINCURSORI<id> >(non inheritable): set and get the arrow cursor
normally shown over margins. Can be: "REVERSEARROW" (default) or
"ARROW".

=head2 Markers

B<MARKERDEFINE> (non inheritable, write-only): Defines a marker using
its number and its symbol. Format: "number=symbol".

B<Marker numbers>: can be a number in the range 0 to 31, or the
pre-defined names: "FOLDEREND", "FOLDEROPENMID", "FOLDERMIDTAIL",
"FOLDERSUB", "FOLDER" and "FOLDEROPEN".

B<Marker symbols:> (see MARKERSYMBOL).

B<MARKERSYMBOLI<id>> (non inheritable): Defines a marker symbol given
its number. id can be from 0 to 31.

B<Marker symbols:> "CIRCLE", "ROUNDRECT", "ARROW", "SMALLRECT",
"SHORTARROW", "EMPTY", "ARROWDOWN", "MINUS", "PLUS", "VLINE",
"LCORNER", "TCORNER", "BOXPLUS", "BOXPLUSCONNECTED", "BOXMINUS",
"BOXMINUSCONNECTED", "LCORNERCURVE", "TCORNERCURVE", "CIRCLEPLUS",
"CIRCLEPLUSCONNECTED", "CIRCLEMINUS", "CIRCLEMINUSCONNECTED",
"BACKGROUND" (line background color), "DOTDOTDOT", "ARROWS", "FULLRECT"
(margin background color), "LEFTRECT", "UNDERLINE" (underline across
the line), "RGBAIMAGE" and "CHARACTER+c" (where c is an ASCii character
code).

B<MARKERFGCOLORI<id> >(non inheritable, write only): defines the
foreground color of a marker number (id). Values in RGB format ("r g
b").

B<MARKERBGCOLORI<id>> (non inheritable, write only): defines the
background color of a marker number (id). Values in RGB format ("r g
b").

B<MARKERBGCOLORSELI<id>> (non inheritable, write only): defines the
highlight background colour of a marker number (id) when its folding
block is selected. Values in RGB format ("r g b").

B<MARKERALPHAI<id> >(non inheritable, write only): defines the alpha
value of a marker number (id). Markers may be drawn translucently when
there are no margins.

B<MARKERRGBAIMAGEI<id> >(non inheritable, write only): defines the
image name to be used on a marker number. Use
L<IupSetHandle|../func/iupsethandle.html> or
L<IupSetAttributeHandle|../func/iupsetattributehandle.html> to
associate an image to a name. See also
L<IupImage|../elem/iupimage.html>. It must be an image created with the
B<IupImageRGBA> constructor, it can not be a image loaded from stock or
resources.

B<MARKERRGBAIMAGESCALE >(non inheritable, write only): defines the
image scale factor, in percent (1-100).

B<MARKERHIGHLIGHT> (non inheritable): enable or disable the the
highlight folding block when it is selected. (i.e. block that contains
the caret). Can be Yes or No. Default: No.

B<MARKERADDI<id>> (non inheritable, write-only): adds marker number to
a line (id). Internally, sets the marker handle number
(LASTMARKERADDHANDLE attribute) that identifies the added marker (or -1
for invalid line and out of memory), which may be useful to find where
a marker is after moving or combining lines removes markers of the
given number from all lines. If marker number is -1, it deletes all
markers from all lines.

B<MARKERDELETEI<id>> (non inheritable, write-only): deletes marker
number given a line number (id). If marker number is -1, all markers
are deleted from the line.

B<MARKERDELETEALL> (non inheritable, write-only): removes markers of
the given number from all lines. If marker number is -1, it deletes all
markers from all lines.

B<MARKERGETI<id>> (non inheritable, read-only): returns a 32-bit
integer that indicates which markers were present on the line (id). Bit
0 is set if marker 0 is present, bit 1 for marker 1 and so on.

B<MARKERNEXTI<id>> (non inheritable, write-only): searches a given
marker number, starting at line number (id) and continuing forwards to
the end of the file. Internally, sets the the line number of the first
line that contains the marker (LASTMARKERFOUND attribute) or -1, if no
marker is found.

B<MARKERPREVIOUSI<id>> (non inheritable, write-only): searches a given
marker number, starting at line number (id) and continuing backwards to
the start of the file. Internally, sets the the line number of the
first line that contains the marker (LASTMARKERFOUND attribute) or -1,
if no marker is found.

B<MARKERLINEFROMHANDLEI<id>> (non inheritable, read-only): searches the
document for the marker given its handle returned in MARKERADDid (use
the LASTMARKERADDHANDLE as attribute value) and returns the line number
of the first line that contains the marker or -1, if no marker is
found.

B<MARKERDELETEHANDLE> (non inheritable, write-only): searches the
document for the marker with this handle (use the LASTMARKERADDHANDLE
as attribute value) and deletes the marker if it is found.

B<LASTMARKERADDHANDLE> (non inheritable, read-only): returns the last
marker handle set by the MARKERADDid attribute.

B<LASTMARKERFOUND> (non inheritable, read-only): returns the last line
number that contains a marker found by the MARKERNEXTid,
MARKERPREVIOUSid or MARKERLINEFROMHANDLE attributes.

=head2 Scrolling

B<SCROLLBAR> (creation only): Associates an automatic horizontal and/or
vertical scrollbar. Can be: "VERTICAL", "HORIZONTAL", "YES" (both) or
"NO" (none). Default: "YES". For all systems, when SCROLLBAR is NO, the
natural size will always include its size even if the native system
hides the scrollbar.

B<SCROLLTO> (non inheritable, write only): Scroll the text to make the
given position visible. It uses the same format and reference of the
L<CARET|#CARET> attribute ("lin,col" or "col" starting at 0).

B<SCROLLTOCARET> (non inheritable, write only): Scroll the text to make
the caret position visible.

B<SCROLLTOPOS> (non inheritable, write only): Scroll the text to make
the given position visible. It uses the same format and reference of
the L<CARETPOS|#CARETPOS> attribute ("pos" starting at 0).

B<SCROLLWIDTH> (non inheritable): controls the document width in
pixels. Default: 2000.

=head2 Style Definition (See L<Style Definition|#StyleDefinition>)

L<BGCOLOR|../attrib/iup_bgcolor.html>: Background color of the text.
Default: the global attribute TXTBGCOLOR. If changed it will affect the
default style.

L<FGCOLOR|../attrib/iup_fgcolor.html>: Text color. Default: the global
attribute TXTFGCOLOR. If changed it will affect the default style.

L<FONT|../attrib/iup_font.html>: the text font. Default: the global
attribute DEFAULTFONT. If changed it will affect the default style.

B<STYLEBGCOLORI<id>> (non inheritable): background color for a style
(See L<Style Definition|#StyleDefinition>). Values in RGB format ("r g
b").

B<STYLEBOLDI<id>> (non inheritable): the boldness of a font (See
L<Style Definition|#StyleDefinition>).

B<STYLECASEI<id>> (non inheritable): determines how text is displayed
(See L<Style Definition|#StyleDefinition>). Values: LOWERCASE,
UPPERCASE or MIXED (default).

B<STYLECHARSETI<id>> (non inheritable): sets and gets a style to use a
different character set than the default (See L<Style
Definition|#StyleDefinition>). Can be ANSI (default), EASTEUROPE,
RUSSIAN, GB2312, HANGUL or SHIFTJIS.

B<STYLECLEARALLI<id>> (non inheritable): sets all styles to have the
same attributes as default global style (id = 32) (See L<Style
Definition|#StyleDefinition>).

B<STYLEEOLFILLEDI<id>> (non inheritable): If the last character in the
line has a style with this attribute set, the remainder of the line up
to the right edge of the window is filled with the background color set
for the last character (See L<Style Definition|#StyleDefinition>). Can
be YES (italic) or NO.

B<STYLEFGCOLORI<id>> (non inheritable): foreground color for a style
(See L<Style Definition|#StyleDefinition>). Values in RGB format ("r g
b").

B<STYLEFONTI<id>> (non inheritable): sets and gets the font name (See
L<Style Definition|#StyleDefinition>). Scintilla caches fonts by their
names, but the cache is case sensitive.

B<STYLEFONTSIZEI<id>> (non inheritable): sets and gets the font size
(See L<Style Definition|#StyleDefinition>), using a integer number of
points.

B<STYLEFONTSIZEFRACI<id>> (non inheritable): sets and gets the font
size (See L<Style Definition|#StyleDefinition>), using a fractional
point size in hundredths of a point. For example, a text size of 9.4
points is set with value = 940.

B<STYLEHOTSPOTI<id>> (non inheritable): used to mark ranges of text
that can detect mouse clicks (See L<Style
Definition|#StyleDefinition>). The cursor changes to a hand over
hotspots, and the foreground, and background colors may change and an
underline appear to indicate that these areas are sensitive to
clicking. This may be used to allow hyperlinks to other documents.

B<STYLEITALICI<id>> (non inheritable): the italic style of a font (See
L<Style Definition|#StyleDefinition>). Can be YES (italic) or NO.

B<STYLERESETI<id>> (non inheritable, write-only): Resets to the initial
Scintilla style default (See L<Style Definition|#StyleDefinition>).

B<STYLEUNDERLINEI<id>> (non inheritable): determines if the underline
is drawn, using a foreground color (See L<Style
Definition|#StyleDefinition>). Can be YES (underline) or NO.

B<STYLEVISIBLEI<id>> (non inheritable): determines if the text is
visible (YES) or hidden (NO) (See L<Style
Definition|#StyleDefinition>).

B<STYLEWEIGHTI<id>> (non inheritable): the weight of a font (See
L<Style Definition|#StyleDefinition>). Predefined values: NORMAL,
SEMIBOLD and BOLD. The weight can also be a number between 1 and 999
with 1 being very light and 999 very heavy.

=head2 Styling

B<CLEARDOCUMENTSTYLE> (non inheritable, write-only): clear all styling
information and reset the folding state.

B<STARTSTYLING> (non inheritable, write only): prepares for styling by
setting the styling position.

B<STYLINGI<id>> (non inheritable, write only): sets the style of given
length characters starting at the styling position and then increases
the styling position by length. id is the style.

=head2 Tabs and Indentation Guides

B<TABSIZE> (non inheritable): Controls the number of characters for a
tab stop. Default: 8.

B<INDENTATIONGUIDES> (non inheritable): dotted vertical lines that
appear within indentation white space every indent size columns. Can
be: NONE, REAL, LOOKFORWARD, LOOKBOTH. Default: NONE.

B<HIGHLIGHTGUIDE> (non inheritable): Highlights the indentation guide
of a given column. When brace highlighting occurs, the indentation
guide corresponding to the braces may be highlighted with the brace
highlighting style (See L<Style Definition|#StyleDefinition>, id = 34).
Set column to 0 to cancel this highlight.

B<USETABS> (non inheritable): Use tabs also for indentation or only
spaces. Can be Yes or No. Default: Yes.

=head2 Undo and Redo

B<REDO> (non inheritable): redo the last operation if set to Yes,
clears the undo information otherwise. Returns Yes or No if redo can be
performed.

B<UNDO> (non inheritable): undo the last operation if set to Yes,
clears the undo information otherwise. Returns Yes or No if undo can be
performed.

B<UNDOCOLLECT> (non inheritable): enable or disable the undo collect of
information. Can be Yes or No. Default: Yes.

=head2 White Space

B<EXTRAASCENT> (non inheritable): sets and gets the space to be added
to the maximum ascent, in order to allow for more space between lines.
Default: 0.

B<EXTRADESCENT> (non inheritable): sets and gets the space to be added
to the maximum descent, in order to allow for more space between lines.
Default: 0.

B<WHITESPACEVIEW> (non inheritable): sets and gets the white space
display mode. The white spaces can be: "INVISIBLE" (shown as an empty
background color), "VISIBLEALWAYS" (drawn as dots and arrows) or
"VISIBLEAFTERINDENT" (white space used for indentation is displayed
normally but after the first visible character, it is shown as dots and
arrows). Default: INVISIBLE.

B<WHITESPACESIZE> (non inheritable): sets and gets the size of the dots
used for mark space characters. Default: 1.

B<WHITESPACEFGCOLOR> (non inheritable, write only): defines the
foreground color of visible white space. Values in RGB format ("r g
b"). By default the color will be defined by the Lexer, but defining
this attribute will overriding the Lexer definition. Set to NULL to
reset the definition and use the Lexer again.

B<WHITESPACEBGCOLOR> (non inheritable, write only): defines the
background color of visible white space. Values in RGB format ("r g
b"). By default the color will be defined by the Lexer, but defining
this attribute will overriding the Lexer definition. Set to NULL to
reset the definition and use the Lexer again.

=head2 Zooming

B<ZOOMIN> (non inheritable, write only): increases the zoom factor by
one point if the current zoom factor is less than 20 points.

B<ZOOMOUT> (non inheritable, write only): decreases the zoom factor by
one point if the current zoom factor is greater than -10 points.

B<ZOOM> (non inheritable): sets and gets the zoom factor directly.
Limits: -10 points to zoom out and 20 points to zoom in.

=over

----

=back

L<ACTIVE|../attrib/iup_active.html>,
L<EXPAND|../attrib/iup_expand.html>,
L<SCREENPOSITION|../attrib/iup_screenposition.html>,
L<POSITION|../attrib/iup_position.html>,
L<MINSIZE|../attrib/iup_minsize.html>,
L<MAXSIZE|../attrib/iup_maxsize.html>, L<WID|../attrib/iup_wid.html>,
L<TIP|../attrib/iup_tip.html>,
L<RASTERSIZE|../attrib/iup_rastersize.html>,
L<ZORDER|../attrib/iup_zorder.html>,
L<VISIBLE|../attrib/iup_visible.html>: also accepted.

L<Drag E<amp> Drop|../attrib/iup_dragdrop.html> attributes are
supported. See Notes bellow.

=head2 Callbacks

L<ACTION|../call/iup_action.html>: Action generated when the text is
edited, but before its value is actually changed. Can be generated when
using the keyboard, undo/redo system or from the clipboard.

 int function(Ihandle *ih, int insert, int pos, int length, char* text ); [in C]elem:action(insert: boolean, pos, length: number, text: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<insert>: =1 when text is inserted, =0 when text is deleted.

B<pos>: 0 based character position when change started.

B<length>: size of the change.

B<text>: the inserted text value. It is NULL when insert=0.

L<BUTTON_CB|../call/iup_button_cb.html>: Action generated when any
mouse button is pressed or released. Use
L<IupConvertXYToPos|../func/iupconvertxytopos.html> to convert (x,y)
coordinates in character positioning.

B<CARET_CB>: Action generated when the caret/cursor position is
changed.

 int function(Ihandle *ih, int lin, int col, int pos); [in C]elem:caret_cb(lin, col, pos: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin, col>: line and column number (start at 0).

B<pos>: 0 based character position.

L<DROPFILES_CB|../call/iup_dropfiles_cb.html>: Action generated when
one or more files are dropped in the element.

B<HOTSPOTCLICK_CB>: Action generated when the user clicks or double
clicks on text that is in a style with the hotspot attribute set.

 int function(Ihandle *ih, int pos, int lin, int col, char* status); [in C]elem:hotspotclick_cb(pos, lin, col: number, status: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<pos>: the character position in the document that corresponds to the
hotspot click.

B<lin>: line in the document that corresponds to the hotspot click.

B<col>: column in the document that corresponds to the hotspot click.

B<status>: status of mouse buttons and certain keyboard keys at the
moment the event was generated. The same macros used for
L<BUTTON_CB|../call/iup_button_cb.html> can be used for this status.

B<MARGINCLICK_CB>: Action generated when the mouse button is clicked
inside a margin that is marked as sensitive.

 int function(Ihandle *ih, int margin, int lin, char* status); [in C]elem:marginclick_cb(margin, lin: number, status: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<margin>: the margin number that was clicked.

B<lin>: line in the document that corresponds to the margin click.

B<status>: status of mouse buttons and certain keyboard keys at the
moment the event was generated. The same macros used for
L<BUTTON_CB|../call/iup_button_cb.html> can be used for this status.

L<MOTION_CB|../call/iup_motion_cb.html>: Action generated when the
mouse is moved. Use L<IupConvertXYToPos|../func/iupconvertxytopos.html>
to convert (x,y) coordinates in character positioning.

B<X<SAVEPOINT_CB>SAVEPOINT_CB>: Notifies the application that a save
point was reached (1) or left (0). Can be used to controls whether to
display a saved or modified document. To set the save point use the
L<SAVEDSTATE|#SAVEDSTATE> attribute.

 int function(Ihandle *ih, int status); [in C]elem:savepoint_cb(status: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<status>: can be 1 (reached) or 0 (left).

B<VALUECHANGED_CB>: Called after the value was interactively changed by
the user.

 int function(Ihandle *ih); [in C]elem:valuechanged_cb() -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<ZOOM_CB>: Notifies the application when the user zooms the display
using the keyboard or the ZOOM attribute. Can be used to recalculate
positions, such as the width of the line number margin to maintain
sizes in terms of characters rather than pixels.

 int function(Ihandle *ih, int zoomInPoints); [in C]elem:zoom_cb(zoomInPoints: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<zoomInPoints>: the current zoom factor.

----

L<MAP_CB|../call/iup_map_cb.html>,
L<UNMAP_CB|../call/iup_unmap_cb.html>,
L<GETFOCUS_CB|../call/iup_getfocus_cb.html>,
L<KILLFOCUS_CB|../call/iup_killfocus_cb.html>,
L<ENTERWINDOW_CB|../call/iup_enterwindow_cb.html>,
L<LEAVEWINDOW_CB|../call/iup_leavewindow_cb.html>,
L<K_ANY|../call/iup_k_any.html>, L<HELP_CB|../call/iup_help_cb.html>:
All common callbacks are supported.

L<Drag E<amp> Drop|../attrib/iup_dragdrop.html> callbacks are
supported. See Notes bellow.

=head2 Auxiliary Functions

L<IupText|../elem/iuptext.html#AUX> auxiliary functions
B<IupTextConvertLinColToPos> and B<IupTextConvertPosToLinCol> can also
be used.

=head2 X<StyleDefinition>Style Definition

Scintilla can automatically format the text using the Lexer or the
application can manually format the text. In both cases only 256
different styles are available. Styles are numbered from 0 to 255,
invalid IDs are simply ignored. When the id is not specified for an
attributes the style 0 is assumed.

Each Lexer will use the available styles with its own rules, but
several Lexers share many ids. Notice that language keywords and styles
definitions are not pre-defined internally, the application must define
them.

ID

Global styles

32

This style defines the attributes that all styles receive when the
STYLECLEARALL attribute is used.

33

This style sets the attributes of the text used to display line numbers
in a line number margin.

34

This style sets the attributes used when highlighting braces with the
BRACEHIGHLIGHT and HIGHLIGHTGUIDE attributes.

35

This style sets the attributes used when marking an unmatched brace
with the BRACEBADLIGHT attribute.

36

This style sets the font used when drawing control characters.

37

This style sets the foreground and background colors used when drawing
the indentation guides. Used when INDENTATIONGUIDES!=NONE.

Here are some known styles for C++ and Lua:

ID

C++ styles

Lua styles

0

Default style

Default style

1

C comment

Lua comment

2

C++ comment line

Lua comment line

3

JavaDoc/ Doxygen style C comment

JavaDoc/ Doxygen style Lua comment

4

Number

Number

5

Keyword

Keyword

6

String

String

7

Character

Character

8

IDL UUID

Literal string

9

Preprocessor block

Preprocessor block

10

Operator

Operator

11

Identifier

Identifier

12

End of a line where a string is not closed

End of a line where a string is not closed

13

C# verbatim string

Keyword set number 2

14

Regular expression

Keyword set number 3

15

JavaDoc/Doxygen style C++ comment line

Keyword set number 4

16

Keyword set number 2

Keyword set number 5

17

JavaDoc/Doxygen keyword

Keyword set number 6

18

JavaDoc/Doxygen keyword error

Keyword set number 7

19

Global class or typedef defined in keyword

Keyword set number 8

20

C++ raw string

Label

21

F# triple-quoted verbatim strings

22

Hash-quoted strings

23

Preprocessor block comment

=head2 Notes

Enter key will add a new line, and the Tab key will insert a Tab.

Internal Drag&Drop support is enabled by default.

B<IupScintilla> uses attributes and callbacks very similar to the
B<IupText> control, except for text formatting.

Although the B<IupScintilla> documentation should be sufficient for
most uses, some advanced features will be better understood if the
L<Scintilla Documentation|http://www.scintilla.org/ScintillaDoc.html>
is consulted. Also some Scintilla features are not available in B<
IupScintilla>, so by consulting that documentation you will be able to
check which one and if necessary you can request the implementation in
B< IupScintilla>.

=head2 Navigation, Selection and Clipboard Keys

Here is a list of the common keys for all drivers. Other keys are
available depending on the driver.

Keys

Action

I<Navigation>

Arrows

move by individual characters/lines

Ctrl+Arrows

move by words/paragraphs

Home/End

move to begin/end line

Ctrl+Home/End

move to begin/end text

PgUp/PgDn

move vertically by pages

Ctrl+PgUp/PgDn

move horizontally by pages

I<Selection>

Shift+Arrows

select charaters

Ctrl+A

select all

I<Deleting>

Del

delete the character at right

Backspace

delete the character at left

I<Clipboard>

Ctrl+C

copy

Ctrl+X

cut

Ctrl+V

paste

=head2 Examples

L<Browse for Example Files|../../examples/>

  IupSetAttribute(ih, "LEXERLANGUAGE", "cpp");
 
 IupSetAttribute(ih, "KEYWORDS0", "void struct union enum char short int long double float signed unsigned const static extern auto register volatile bool class private protected public friend inline template virtual asm explicit typename mutable"
                                   "if else switch case default break goto return for while do continue typedef sizeof NULL new delete throw try catch namespace operator this const_cast static_cast dynamic_cast reinterpret_cast true false using"
                                   "typeid and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq");
 
 //IupSetAttribute(ih, "STYLEFONT32", "Courier New");
 IupSetAttribute(ih, "STYLEFONT32", "Consolas");
 IupSetAttribute(ih, "STYLEFONTSIZE32", "11");
 IupSetAttribute(ih, "STYLECLEARALL", "Yes");  /* sets all styles to have the same attributes as 32 */
 
 IupSetAttribute(ih, "STYLEFGCOLOR1", "0 128 0");    // 1-C comment�
 IupSetAttribute(ih, "STYLEFGCOLOR2", "0 128 0");    // 2-C++ comment line�
 IupSetAttribute(ih, "STYLEFGCOLOR4", "128 0 0");    // 4-Number�
 IupSetAttribute(ih, "STYLEFGCOLOR5", "0 0 255");    // 5-Keyword�
 IupSetAttribute(ih, "STYLEFGCOLOR6", "160 20 20");  // 6-String�
 IupSetAttribute(ih, "STYLEFGCOLOR7", "128 0 0");    // 7-Character�
 IupSetAttribute(ih, "STYLEFGCOLOR9", "0 0 255");    // 9-Preprocessor block�
 IupSetAttribute(ih, "STYLEFGCOLOR10", "255 0 255"); // 10-Operator�
 IupSetAttribute(ih, "STYLEBOLD10", "YES");
 
 IupSetAttribute(ih, "STYLEHOTSPOT6", "YES");
   
 IupSetAttribute(ih, "MARGINWIDTH0", "50");
 
 IupSetAttribute(ih, "PROPERTY", "fold=1");
 IupSetAttribute(ih, "PROPERTY", "fold.compact=0");
 IupSetAttribute(ih, "PROPERTY", "fold.comment=1");
 IupSetAttribute(ih, "PROPERTY", "fold.preprocessor=1");
 
 IupSetAttribute(ih, "MARGINWIDTH1", "20");
 IupSetAttribute(ih, "MARGINTYPE1",  "SYMBOL");
 IupSetAttribute(ih, "MARGINMASKFOLDERS1",  "Yes");
 
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDER=PLUS");
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDEROPEN=MINUS");
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDEREND=EMPTY");
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDERMIDTAIL=EMPTY");
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDEROPENMID=EMPTY");
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDERSUB=EMPTY");
 IupSetAttribute(ih, "MARKERDEFINE", "FOLDERTAIL=EMPTY");
 
 IupSetAttribute(ih, "FOLDFLAGS", "LINEAFTER_CONTRACTED");
 
 IupSetAttribute(ih, "MARGINSENSITIVE1", "YES");

[IMAGE]

=head2 X<SeeAlso>See Also

L<IupText|../elem/iuptext.html>, L<Scintilla|http://www.scintilla.org/>

=cut