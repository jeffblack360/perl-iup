=head1 IupMatrixList (since 3.9)

Creates an interface element that displays a list of items, just like
B< IupList>, but internally uses a B<IupMatrix>.

It uses the matrix columns to display labels, color boxes and check
boxes in a way that is not possible using B<IupList>. But the control
mimics the B<IupList> attributes, callbacks and interaction, so the
usage by the programmer and by the user should be very similar.

This is an additional control that depends on the
L<IupControls|../iupcontrols.html> library.

Based on MTXLIB, developed at Tecgraf/PUC-Rio by Renata Trautmann and
Andre Derraik.

=head2 Creation

 Ihandle* IupMatrixList(void); [in C]
 iup.matrixlist{} -> (elem: ihandle) [in Lua]
 matrixlist() [in LED]

Returns the identifier of the created matrix, or NULL if an error
occurs.

=head2 Attributes

B<"1">: First item in the list.

B<"2">: Second item in the list.

B<"3">: Third item in the list.

B<...>

B<"id">: idth item in the list.

(non inheritable) Item value. It can be any text. Differently from the
B<IupList> control, the item must exist so its label can be changed. So
B<APPENDITEM, INSERTITEMI<id> , ADDLIN> or B<COUNT> attributes must be
used to reserve space for the list items. Notice that lines and items
in the list are the same thing.

B<ADDLIN> (write-only): adds a new line to the list after the specified
line. To insert a line at the top, value 0 must be used. To add more
than one line, use format "B<I<L-L>>", where the first number
corresponds to the base line and the second number corresponds to the
number of lines to be added. Ignored if set before map.

B<APPENDITEM> (write-only): inserts an item after the last item.
Ignored if set before map.

B<COLORCOL >(read-only): returns the number of color column. If not
exists, returns 0.

B<COLORI<id> >: the color displayed at the color column. If not defined
the color box is not diplayed.

B<COLUMNORDER>: defines or retrieves the display order of the columns.
Possible values a combination of: "LABEL", "COLOR" and "IMAGE". These
values also can be combined in these formats: VALUE1 (one column);
VALUE1:VALUE2 (two columns) or VALUE1:VALUE2:VALUE3 (three columns).
Default: "LABEL" (one column).

B<COUNT>: defines the number of items in the list. Differently from the
B<IupList> control it is not read-only. It does not include the extra
empty item when EDITABLE=Yes.

B<DELLIN> (write-only): removes the given line from the list. To remove
more than one line, use format "B<I<L-L>>", where the first number
corresponds to the base line and the second number corresponds to the
number of lines to be removed. Ignored if set before map.

B<EDITABLE> (creation-only): enables the interactive editing of the
list. It can be Yes or No. Default: "NO". An empty item at the end of
the list will be available so new items can be interactively inserted.
Also while editing a label, the IMAGE column will display a button so
the item can be interactively removed.

B<FOCUSCOLOR>: the background color when an item get the focus. Values
in RGB format ("r g b"). Default: "255 235 155".

B<FOCUSITEM>: defines the current focus item.Default: "1".

B<IMAGEI<id> >(write-only): name of the image to be used in the
specified item (id). Use L<IupSetHandle|../func/iupsethandle.html> or
L<IupSetAttributeHandle|../func/iupsetattributehandle.html> to
associate an image to a name. See also
L<IupImage|../elem/iupimage.html>. Image column must be available.

B<IMAGEACTIVEI<id>>: controls the interaction with the image of an
item. It can be Yes or No. Default: Yes. Image column must be
available.

B<IMAGEADD >(write-only): name of the image that will be shown when the
IupMatrixList is editable. Default: "MTXLIST_IMG_ADD". Use
L<IupSetHandle|../func/iupsethandle.html> or
L<IupSetAttributeHandle|../func/iupsetattributehandle.html> to
associate an image to a name. See also
L<IupImage|../elem/iupimage.html>. Image column must be available.

B<IMAGECHECK >(write-only): name of the image that will be shown when
the IMAGEVALUE attribute is "IMAGECHECK". Default: "MTXLIST_IMG_CHECK".
Use L<IupSetHandle|../func/iupsethandle.html> or
L<IupSetAttributeHandle|../func/iupsetattributehandle.html> to
associate an image to a name. See also
L<IupImage|../elem/iupimage.html>. Image column must be available.

B<IMAGECOL >(read-only): returns the number of image column. If not
exists, returns 0.

B<IMAGEDEL >(write-only): name of the image that will be shown when the
IupMatrixList is editable or when SHOWDELETE=Yes. Default:
"MTXLIST_IMG_DEL". Use L<IupSetHandle|../func/iupsethandle.html> or
L<IupSetAttributeHandle|../func/iupsetattributehandle.html> to
associate an image to a name. See also
L<IupImage|../elem/iupimage.html>. Image column must be available.

B<IMAGEUNCHECK >(write-only): name of the image that will be shown when
the IMAGEVALUE attribute is "IMAGEUNCHECK". Default:
"MTXLIST_IMG_UNCHECK". Use L<IupSetHandle|../func/iupsethandle.html> or
L<IupSetAttributeHandle|../func/iupsetattributehandle.html> to
associate an image to a name. See also
L<IupImage|../elem/iupimage.html>. Image column must be available.

B<IMAGEVALUEI<id>>: selects the CHECK or the UNCHECK image to display
for an item (id). It can be Yes or No. Default: NO.

B<INSERTITEMI<id>> (write-only): inserts an item before the given id
position (id starts at 1). If id=COUNT+1 then it will append after the
last item. Ignored if out of bounds. Ignored if set before map.

B<ITEMACTIVEI<id>>: controls the interaction with an item (id). It can
be Yes or No. Default: "YES".

B<ITEMFGCOLORI<id>>: text color of an item (id).

B<ITEMBGCOLORI<id>>: background color of an item (id).

B<LABELCOL >(read-only): returns the number of label column. If not
exists, returns 0.

B<REMOVEITEM >(write-only): removes the given item from the list.

B<SHOWDELETE>: Shows only the B<IMAGEDEL> image and ignores
B<IMAGECHECK> and B<IMAGEUNCHECK.>

B<TITLE>: title of the list. When not NULL the list will display a non
scrollable title.

B<TOPITEM> (write-only): position the given item at the top of the list
or near to make it visible.

B<VALUE>: defines or retrieves the value of the current cell.

B<VISIBLELINES>: defines the number of visible lines for the B<Natural>
B<Size>, this means that will act also as minimum number of visible
lines. Default: "3".

=head2 Other Attributes

Since the B<IupMatrixList> inherits its implementation from the
B<IupMatrix>, and that one from B<IupCanvas>, those controls attributes
and callbacks can be used. But notice that B< IupMatrixList> uses
several of them internally for its own purpose, and reusing them may
affect the control behavior and appearance.

Some attribute defaults were changed:

B<EXPAND>: changed to "NO".

B<ALIGNMENTLIN0>: changed to "ALEFT".

B<CURSOR>: changed to "ARROW".

B<FRAMETITLEHIGHLIGHT>: changed to "NO".

B<HIDEFOCUS>: changed to "YES".

B<SCROLLBAR>: changed to "VERTICAL".

=over

----

=back

L<ACTIVE|../attrib/iup_active.html>,
L<EXPAND|../attrib/iup_expand.html>, L<FONT|../attrib/iup_font.html>,
L<SCREENPOSITION|../attrib/iup_screenposition.html>,
L<POSITION|../attrib/iup_position.html>,
L<MINSIZE|../attrib/iup_minsize.html>,
L<MAXSIZE|../attrib/iup_maxsize.html>, L<WID|../attrib/iup_wid.html>,
L<TIP|../attrib/iup_tip.html>, L<SIZE|../attrib/iup_size.html>,
L<RASTERSIZE|../attrib/iup_rastersize.html>,
L<ZORDER|../attrib/iup_zorder.html>,
L<VISIBLE|../attrib/iup_visible.html>: also accepted.

=head2 Callbacks

B<IMAGEVALUECHANGED_CB>: called after the image value was interactively
changed by the user (mark/unmark).

 int function (Ihandle *ih, int lin, int imagevalue); [in C]elem:imagevaluechanged_cb(lin, imagevalue: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: item line.

B<imagevalue>: equal to 1 if the image used was IMAGECHECK or to 0 if
the image used IMAGEUNCHECK.

B<LISTACTION_CB>: Action generated when the state of an item in the
list is changed. Also provides information on the changed item:

 int function (Ihandle *ih, int item, int state); [in C]elem:listaction_cb(item, state: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<item>: Number of the changed item starting at 1.

B<state>: Equal to 1 if the item is in focus or to 0 if the item loses
its focus.

B<LISTCLICK_CB>: Action generated when any mouse button is pressed over
a item.

 int function (Ihandle *ih, int lin, int col, char *status); [in C]elem:listclick_cb(lin, col: number, status: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: item line.

B<col>: item column (label, image or color).

B<status>: Status of the mouse buttons and some keyboard keys at the
moment the event is generated. The same macros used for
L<BUTTON_CB|../call/iup_button_cb.html> can be used for this status.

Returns: To avoid the default processing return IUP_IGNORE.

B<LISTDRAW_CB>: Action generated when an item needs to be redrawn. It
is called before the default processing.

 int function (Ihandle *ih, int lin, int col, int x1, int x2, int y1, int y2, cdCanvas* cnv); [in C]elem:listdraw_cb(text: string, item, state: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: item line.

B<col>: item column (label, image or color).

B<x1>, B<x2>, B<y1>, B<y2>: bounding rectangle of the current cell in
pixels, excluding the decorations.

B<cnv>: internal canvas CD used to draw the list.

Returns: If IUP_IGNORE the normal drawing will take place.

B<LISTEDITION_CB>: Action generated when the current cell of an item
enters or leaves the edition mode. Called before the default
processing.

 int function (Ihandle *ih, int lin, int col, int mode, int update); [in C]elem:listedition_cb(lin, col, mode, update: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: item line.

B<col>: item column (label, image or color).

B<mode>: equal to 1 if the cell has entered the edition mode, or 0 if
the cell has left the edition mode.

B<update>: equal to 1 to redraw, or 0 to no update returning
IUP_IGNORE.

B<LISTINSERT_CB>: Action generated when a new item is inserted into the
list.

 int function (Ihandle *ih, int lin); [in C]elem:listinsert_cb(lin: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: position of the new item.

B<LISTRELEASE_CB>: Action generated when any mouse button is released
over a item.

 int function (Ihandle *ih, int lin, int col, char *status); [in C]elem:listrelease_cb(lin, col: number, status: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: item line.

B<col>: item column (label, image or color).

B<status>: Status of the mouse buttons and some keyboard keys at the
moment the event is generated. The same macros used for
L<BUTTON_CB|../call/iup_button_cb.html> can be used for this status.

Returns: To avoid the default processing return IUP_IGNORE.

B<LISTREMOVE_CB>: Action generated when an item is removed of the list.

 int function (Ihandle *ih, int lin); [in C]elem:listremove_cb(lin: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<lin>: position of the removed item.

=head2 Examples

L<Browse for Example Files|../../examples/>

[IMAGE]

[IMAGE]

=head2 X<SeeAlso>See Also

L<IupCanvas|../elem/iupcanvas.html>, L<IupMatrix|iupmatrix.html>

=cut