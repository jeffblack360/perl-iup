=head1 IupColorBrowser

Creates an element for selecting a color. The selection is done using a
cylindrical projection of the RGB cube. The transformation defines a
coordinate color system called HSI, that is still the RGB color space
but using cylindrical coordinates.

B<H> is for Hue, and it is the angle around the RGB cube diagonal
starting at red (RGB=255 0 0).

B<S> is for Saturation, and it is the normal distance from the color to
the diagonal, normalized by its maximum value at the specified Hue.
This also defines a point at the diagonal used to define B<I>.

B<I> is for Intensity, and it is the distance from the point defined at
the diagonal to black (RGB=0 0 0). B<I> can also be seen as the
projection of the color vector onto the diagonal. But B<I> is not
linear, see L<Notes|#Notes> below.

This is an additional control that depends on the CD library. It is
included in the L<IupControls|../iupcontrols.html> library.

For a dialog that simply returns the selected color, you can use
function L<IupGetColor|../dlg/iupgetcolor.html> or
L<IupColorDlg|../dlg/iupcolordlg.html>.

=head2 Creation

 Ihandle* IupColorBrowser(void); [in C]
 iup.colorbrowser{} (elem: ihandle) [in Lua]
 colorbrowser() [in LED]

Returns: the identifier of the created element, or NULL if an error
occurs.

=head2 Attributes

L<EXPAND|../attrib/iup_expand.html>: The default is "NO".

L<RASTERSIZE|../attrib/iup_rastersize.html> (non inheritable): the
initial size is "181x181". Set to NULL to allow the automatic layout
use smaller values.

B<RGB> (non inheritable): the color selected in the control, in the "r
g b"E<157> format; r, g and b are integers ranging from 0 to 255.
Default: "255 0 0".

B<HSI> (non inheritable): the color selected in the control, in the "h
s i"E<157> format; h, s and i are floating point numbers ranging from
0-360, 0-1 and 0-1 respectively.

=over

----

=back

L<ACTIVE|../attrib/iup_active.html>,
L<BGCOLOR|../attrib/iup_bgcolor.html>, L<FONT|../attrib/iup_font.html>,
L<X|../attrib/iup_x.html>, L<Y|../attrib/iup_y.html>,
L<POSITION|../attrib/iup_position.html>,
L<MINSIZE|../attrib/iup_minsize.html>,
L<MAXSIZE|../attrib/iup_maxsize.html>, L<WID|../attrib/iup_wid.html>,
L<TIP|../attrib/iup_tip.html>, L<SIZE|../attrib/iup_size.html>,
L<ZORDER|../attrib/iup_zorder.html>,
L<VISIBLE|../attrib/iup_visible.html>: also accepted.

=head2 Callbacks

B<CHANGE_CB>: Called when the user releases the left mouse button over
the control, defining the selected color.

 int change(Ihandle *ih, unsigned char r, unsigned char g, unsigned char b); [in C]
 elem:change_cb(r: number, g: number, b: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<r, g, b>: color value.

B<DRAG_CB>: Called several times while the color is being changed by
dragging the mouse over the control.

 int drag(Ihandle *ih, unsigned char r, unsigned char g, unsigned char b); [in C]
 elem:drag_cb(r: number, g: number, b: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<r, g, b>: color value.

B<VALUECHANGED_CB>: Called after the value was interactively changed by
the user. It is called whenever a B<CHANGE_CB >or a B<DRAG_CB >would
also be called, it is just called after them. (since 3.0)

 int function(Ihandle *ih); [in C]elem:valuechanged_cb() -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

=over

----

=back

L<MAP_CB|../call/iup_map_cb.html>,
L<UNMAP_CB|../call/iup_unmap_cb.html>,
L<GETFOCUS_CB|../call/iup_getfocus_cb.html>,
L<KILLFOCUS_CB|../call/iup_killfocus_cb.html>,
L<ENTERWINDOW_CB|../call/iup_enterwindow_cb.html>,
L<LEAVEWINDOW_CB|../call/iup_leavewindow_cb.html>,
L<K_ANY|../call/iup_k_any.html>, L<HELP_CB|../call/iup_help_cb.html>:
All common callbacks are supported.

=head2 Notes

When the control has the focus the keyboard can be used to change the
color value. Use the arrow keys to move the cursor inside the SI
triangle, and use Home(0), PageUp, PageDn and End(180) keys to move the
cursor inside the Hue circle.

The Hue in the HSI coordinate system defines a plane that it is a
triangle in the RGB cube. But the maximum saturation in this triangle
is different for each Hue because of the geometry of the cube. In
ColorBrowser this point is fixed at the center of the B<I> axis. So the
B<I> axis is not completely linear, it is linear in two parts, one from
0 to 0.5, and another from 0.5 to 1.0. Although the selected values are
linear specified you can notice that when Hue is changed the gray scale
also changes, visually compacting values above or below the I=0.5 line
according to the selected Hue.

This is the same HSI specified in the
L<IM|http://www.tecgraf.puc-rio.br/im> toolkit, except for the non
linearity of B<I>. This non linearity were introduced so a simple
triangle could be used to represent the SI plane.

=head2 Examples

L<Browse for Example Files|../../examples/>

[IMAGE]

=head2 X<SeeAlso>See Also

L<IupGetColor|../dlg/iupgetcolor.html>,
L<IupColorDlg|../dlg/iupcolordlg.html>.

=cut