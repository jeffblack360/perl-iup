=head1 IupPPlot

Creates a plot of one or more data sets. It inherits from
L<IupCanvas|../elem/iupcanvas.html>. Uses the PPlot library.

PPlot is a library for creating plots that is system independent. It is
maintained by Pier Philipsen (pierphil@xs4all.nl) and available at
SourceForge
L<http:E<47>E<47>pplot.sourceforge.netE<47>|http://pplot.sourceforge.net/>
with a very flexible BSD License). IupPPlot library includes the PPlot
source code so no external references are needed. Also the standard
PPlot distribution source code was changed to improve features and
visual appearance.

IupPPlot first implementation was written by Marian Trifon
(mtrif@katamail.com), then completed and documented by the IUP team.

=head2 Initialization and Usage

The B<IupPPlotOpen> function must be called after a B<IupOpen>, so that
the control can be used. The "iup_pplot.h" file must also be included
in the source code. The program must be linked to the controls library
(iup_pplot), and with the CD library.

To make the control available in Lua use require"iuplua_pplot" or
manually call the initialization function in C, B<iuppplotlua_open>,
after calling B<iuplua_open>. When manually calling the function the
iuplua_pplot.h file must also be included in the source code and the
program must be linked to the Lua control library (iuplua_pplot).

=head2 Guide

Each plot can contain 2 B<axis> (X and Y), a B<title>, a B< legend>
B<box>, a B<grid>, a B<dataset> B<area> and as many B<datasets> you
want.

Each data set is added using the B<IupPPlotAdd >function. All other
plot parameters are configured by attributes.

If no attribute is set, the default values were selected to best
display the plot.

When setting attributes the plot is NOT redrawn until the REDRAW
attribute is set or a redraw event occurs.

The B<dataset area> is delimited by a margin. Data is only plotted
inside the dataset area. Axis and main title are positioned independent
of this margin. It is very important to set the margins when using axis
automatic scaling or the axis maybe hidden.

The B<legend box> is a list of the dataset names, each one drawn with
the same color of the correspondent dataset. The box is located in one
of the four corners of the dataset area.

The B<grid> is automatically spaced accordingly the current axis
displayed values.

The B<title> is always centered in the top of the plot.

The B<axis> are always positioned at the origin, except when
CrossOrigin is disabled, then it is positioned at the left-bottom. If
values are only positive then the origin will be placed in left bottom
position. If values are negative and positive then origin will be
placed inside the plot. The ticks in the axis are also automatically
distributed.

PPlot implementation demands that the MARGIN* attributes must be set so
the plot is not cropped.

=head2 Interaction

=head2 Zoom

Zoom in can be done selecting a region using the left mouse button.
Zoom out is done with a single click of the left mouse button. If the
B<Ctrl+X> key combination is pressed the zoom selection is restricted
to the X axis, the Y axis will be left unchanged. If the B<Ctrl+Y> key
combination is pressed the zoom selection is restricted to the Y axis,
the X axis will be left unchanged. If the B<Ctrl+R> key combination is
pressed the zoom selection is restored to a free rectangle.

The mouse B<Wheel> will pan in the vertical direction, and when
B<Shift> is pressed will pan in the horizontal direction. (Since 3.9)

Each zoom in operation is stacked, so each zoom out operation goes back
the the previous zoom selection.

Zoom operates on B<AXS_XMAX, AXS_XMIN, AXS_YMAX, AXS_YMIN> even if B<
AUTOMIN/MAX> is enabled. The axis may be hidden depending on the
selected rectangle. The B< AUTOMIN/MAX> attributes will be disabled
during zoom in, and restored when zoom out completely.

=head2 CrossHair Cursor

If you press the B<Ctrl+Shift> key combination, while holding the left
mouse button down, a cross hair cursor will be displayed for each
dataset in the plot. The X coordinate will control the cursor, the Y
coordinate will reflect each dataset correspondent value.

=head2 Selection and Editing

Selection and editing of a dataset can be enabled using the B<DS_EDIT>
attribute.

To select all the samples in the dataset press the B<Shift> key while
clicking with the left mouse button near a sample in the dataset. To
deselect all samples press the B<Shift> key while clicking with the
left mouse button in the background.

To select or deselect individual samples press the B<Ctrl> key while
clicking with the left mouse button near the sample in the dataset.

After selecting samples use the B<Del> key to remove the selected
samples. Also use the arrow keys to move the Y coordinate of the
selected samples. Press the B<Ctrl> key to increase the step size when
moving the Y coordinate.

=head2 Creation

 Ihandle* IupPPlot(void); [in C]
 iup.pplot{} -> (elem: ihandle) [in Lua]
 pplot() [in LED]

This function returns the identifier of the created plot, or NULL if an
error occurs.

=head2 Auxiliary Functions

 void IupPPlotBegin(Ihandle* ih, int strXdata); [in C]
 iup.PPlotBegin(ih: ihandle, strXdata: number) [in Lua]

Prepares a dataset to receive samples. If strXdata is 1 then the X axis
value is a string.

----

 void IupPPlotAdd(Ihandle* ih, float x, float y); [in C]
 iup.PPlotAdd(ih: ihandle, x, y: number) [in Lua]

Adds a sample to the dataset. Can only be called if B<IupPPlotBegin>
was called with strXdata=0.

----

 void IupPPlotAddStr(Ihandle* ih, const char* x, float y); [in C]
 iup.PPlotAddStr(ih: ihandle, x: string, y: number) [in Lua]

Same as B<IupPPlotAdd>, but allows to use a string as the X axis value.
Can only be called if B<IupPPlotBegin> was called with strXdata=1.

----

 int IupPPlotEnd(Ihandle* ih); [in C]
 iup.PPlotEnd(ih: ihandle) -> (index: number) [in Lua]

Adds a 2D dataset to the plot and returns the dataset B<index>. The
data set can be empty. Redraw is NOT done until the REDRAW attribute is
set. Also it will change the current dataset index to the return value.
You can only set attributes of a dataset AFTER you added the dataset.
Can only be called if B<IupPPlotBegin> was called. Whenever you create
a dataset all its "DS_*" attributes will be set to the default values.
Notice that DS_MODE must be set before other "DS_*" attributes.

----

 void IupPPlotInsert(Ihandle *ih, int index, int sample_index, float x, float y); [in C]
 void IupPPlotInsertStr(Ihandle *ih, int index, int sample_index, const char* x, float y);
 iup.PPlotInsert(ih: ihandle, index, sample_index, x, y: number) [in Lua]
 iup.PPlotInsertStr(ih: ihandle, index, sample_index: number, x: string, y: number)

Inserts a sample in a dataset at the given B<sample_index>. Can be used
only after the dataset is added to the plot.

----

 void IupPPlotInsertPoints(Ihandle *ih, int index, int sample_index, float* x, float* y, int count); [in C]
 void IupPPlotInsertStrPoints(Ihandle *ih, int index, int sample_index, const char** x, float* y, int count);
 iup.PPlotInsertPoints(ih: ihandle, index, sample_index: number, x, y: table of number) [in Lua]
 iup.PPlotInsertStrPoints(ih: ihandle, index, sample_index: number, x, y: table of number)

Inserts an array of samples in a dataset at the given B<sample_index>.
Can be used only after the dataset is added to the plot. (Since 3.4)

----

 void IupPPlotAddPoints(Ihandle *ih, int index, float* x, float* y, int count); [in C]
 void IupPPlotAddStrPoints(Ihandle *ih, int index, const char** x, float* y, int count);
 iup.PPlotAddPoints(ih: ihandle, index: number, x, y: table of number) [in Lua]
 iup.PPlotAddStrPoints(ih: ihandle, index: number, x, y: table of number)

Adds an array of samples in a dataset at the end. Can be used only
after the dataset is added to the plot. (Since 3.4)

----

 void IupPPlotTransform(Ihandle* ih, float x, float y, int *ix, int *iy); [in C]
 iup.PPlotTransform(ih: ihandle, x, y: number) -> (ix, iy: number) [in Lua]

Converts coordinates in plot units to pixels. It should be used in
PREDRAW_CB and POSTDRAW_CB callbacks only. Output variables can be NULL
if not used. It can be used inside other callbacks, but make sure that
the drawing after a resize is done.

----

 void IupPPlotPaintTo(Ihandle* ih, cdCanvas* cnv); [in C]
 iup.PPlotPaintTo(ih: ihandle, cnv: cdCanvas) [in Lua]

Plots to the given CD canvas instead of the display canvas.

=head2 Attributes

B<REDRAW> (write-only) (non inheritable): redraw all plots and update
the display. Value is ignored. All other attributes will B<NOT> update
the display, so you can set many attributes without visual output.

B<SYNCVIEW> (non inheritable): when a plot view is changed by
interactive zoom or pan, the other plots are zoomed or panned
accordingly. (since 3.9)

B<USE_IMAGERGB >(non inheritable): defines if the double buffer will
use standard driver image (NO - faster) or an RGB image (YES - slower).
Default: NO. The IMAGERGB driver has anti-aliasing which can improve
the line drawing.

B<USE_CONTEXTPLUS> (non inheritable): defines if the CD canvas will use
ContextPlus drivers (YES) for drawing or standard drivers (NO).
Default: NO. The ContextPlus drivers has anti-aliasing which can
improve the line drawing. (renamed from USE_GDI+ in 3.8)

=head2 Multiple Plots Management (non inheritable) (since 3.9)

B<PLOT_COUNT>: defines the number of multiple plots in the same
control. Default: 1. The minimum value is 1. If set to a smaller value
will automatically remove the remaining plots. If set to a larger value
will automatically add new plots at the end. The maximum number of
plots is 20.

B<PLOT_NUMCOL>: defines the number of columns for multiple plot.
Default: 1. The plots will fill the space starting at the first line at
the top from left to right. If there is not enough plots to fill all
columns an empty space will be displayed.

B<PLOT_CURRENT>: current plot index. Default: 0. All plot attributes
are dependent on this value. When set can use also the B<TITLE > name
as value.

B<PLOT_INSERT> (write-only): inserts a new plot at the given index. If
value is NULL will append after the last plot. Value can also be the
TITLE of an existing plot. When a new plot is inserted it becomes the
current plot.

B<PLOT_REMOVE> (write-only): removes a plot given its index. If value
is NULL the current plot is removed. Value can also be the TITLE of an
existing plot.

=head2 Plot Configuration (non inheritable)

B<L<FONT|../attrib/iup_font.html>>: the default font used in all text
elements of the plot: title, legend and labels.

B<L<BGCOLOR|../attrib/iup_bgcolor.html>>: the background color of the
plot. The default value is white "255 255 255".

B<MARGINLEFT, MARGINRIGHT, MARGINTOP, MARGINBOTTOM >(non inheritable):
margin of the dataset area in pixels. PPlot implementation demands that
margins B<must be set >so the plot is not cropped. Default: "15", "15",
"30", "15".

=head2 Title Configuration (non inheritable)

B<L<FGCOLOR|../attrib/iup_fgcolor.html>>: the title color. The default
value is black "0 0 0".

B<TITLE >(non inheritable): the title. Located always at the top center
area.

B<TITLEFONTSIZE, TITLEFONTSTYLE >(non inheritable): the title font size
and style. The default values depends on the FONT attribute and the
returned value is NULL. Set to NULL, to use the FONT attribute values.
Style can be "PLAIN", "BOLD", "ITALIC" or "BOLDITALIC". The size is
provided in points (1/72 inch) or in pixels (using negative values).

=head2 Legend Configuration (non inheritable)

B<LEGENDSHOW>: shows or hides the legend box. Can be YES or NO.
Default: NO.

B<LEGENDPOS>: legend box position. Can be: "TOPLEFT", "TOPRIGHT",
"BOTTOMLEFT", "BOTTOMRIGHT, or "BOTTOMCENTER". Default: "TOPRIGHT". The
legend box is displayed inside the plot area, except for BOTTOMCENTER
that is displayed bellow the plot area, along with the axis.
("BOTTOMCENTER" since 3.9)

B<LEGENDFONTSIZE, LEGENDFONTSTYLE>: the legend box text font size and
style.

=head2 Grid Configuration (non inheritable)

B<GRID>: shows or hides the grid in both or a specific axis. Can be:
YES (both), HORIZONTAL, VERTICAL or NO. Default: NO.

B<GRIDLINESTYLE>: line style of the grid. Can be: "CONTINUOUS",
"DASHED", "DOTTED", "DASH_DOT", "DASH_DOT_DOT". Default is
"CONTINUOUS".

B<GRIDCOLOR>: grid color. Default: "200 200 200".

=head2 Dataset List Management (non inheritable)

B<REMOVE> (write-only): removes a dataset given its index or its
B<DS_LEGEND> name (DS_LEGEND since 3.9). Notice that after removing a
dataset the other datasets indices that are greater than the given
index will be updated.

B<CLEAR> (write-only): removes all datasets. Value is ignored.

B<COUNT> [read-only]: total number of datasets.

B<CURRENT>: current dataset index. Default is -1. When a dataset is
added it becomes the current dataset. The index starts at 0. All "DS_*"
attributes are dependent on this value. When set can use also the
B<DS_LEGEND> name as value (since 3.9).

=head2 Dataset Configuration (non inheritable)

B<DS_LEGEND>: legend text of the current dataset. Default is
dynamically generated: "plot 0", "plot 1", "plot 2", ...

B<DS_COLOR>: color of the current dataset and it legend text. Default
is dynamically set from the list "255 0 0", "0 255 0", "0 0 255", "0
255 255", "255 0 255", "255 255 0", "128 0 0", "0 128 0", "0 0 128", "0
128 128", "128 0 128", "128 128 0". If the color is not already being
used in an existent dataset then it is used as the new default. If all
defaults are used then black is used "0 0 0". (added more colors and
existing check since 3.9)

B<DS_COUNT>: returns the number of samples of the current dataset.
(since 3.6)

B<DS_MODE>: drawing mode of the current dataset. Can be: "LINE", "BAR",
"MARK" or "MARKLINE". Default: "LINE". This must be set before other
"DS_*" attributes.

B<DS_LINESTYLE>: line style of the current dataset. Can be:
"CONTINUOUS", "DASHED", "DOTTED", "DASH_DOT", "DASH_DOT_DOT". Default
is "CONTINUOUS".

B<DS_LINEWIDTH>: line width of the current dataset. Default: 1.

B<DS_MARKSTYLE>: mark style of the current dataset. Can be: "PLUS",
"STAR", "CIRCLE", "X", "BOX", "DIAMOND", "HOLLOW_CIRCLE", "HOLLOW_BOX",
"HOLLOW_DIAMOND". Default is "X".

B<DS_MARKSIZE>: mark size of the current dataset in pixels. Default: 7.

B<DS_SHOWVALUES>: enable or disable the display of the values near each
sample. Can be YES or NO. Default: NO.

B<DS_REMOVE> (write-only): removes a sample from the current dataset
given its index.

B<DS_EDIT>: enable or disable the current dataset interactive selection
and editing. Can be YES or NO. Default: NO.

=head2 Axis Configuration (non inheritable)

B<AXS_XCOLOR, AXS_YCOLOR>: axis, ticks and label color. Default: "0 0
0".

B<AXS_XMAX, AXS_XMIN, AXS_YMAX, AXS_YMIN>: minimum and maximum
displayed values of the respective axis. Automatically calculated
values when AUTOMIN or AUTOMAX are enabled. Interactive zoom will
change this values during run time.

B<AXS_XAUTOMIN, AXS_XAUTOMAX, AXS_YAUTOMIN, AXS_YAUTOMAX>: configures
the automatic scaling of the minimum and maximum display values. Can be
YES or NO. Default: YES. They will be disabled during zoom in and
restored when zoom out completely.

B<AXS_XLABEL, AXS_YLABEL>: text label of the respective axis.

B<AXS_XLABELCENTERED>, B<AXS_YLABELCENTERED>: text label position at
center (YES) or at top/right (NO). Default: YES.

B<AXS_XREVERSE, AXS_YREVERSE>: reverse the axis direction. Can be YES
or NO. Default: NO. Default is Y oriented bottom to top, and X oriented
from left to right.

B<AXS_XCROSSORIGIN, AXS_YCROSSORIGIN>: allow the axis to cross the
origin and to be placed inside the dataset area. Can be YES or NO.
Default: YES.

B<AXS_XSCALE, AXS_YSCALE>: configures the scale of the respective axis.
Can be: LIN (liner), LOG10 (base 10), LOG2 (base 2) and LOGN (base e).
Default: LIN.

B<AXS_XFONTSIZE, AXS_YFONTSIZE, AXS_XFONTSTYLE, AXS_YFONTSTYLE>: axis
label text font size and style. See TITLEFONTSIZE and TITLEFONTSTYLE.

=head2 Axis Ticks Configuration (non inheritable)

B<AXS_XTICK, AXS_YTICK>: enable or disable the axis tick display. Can
be YES or NO. Default: YES.

B<AXS_XTICKFORMAT, AXS_YTICKFORMAT>: axis tick number C format string.
Default: "%.0f".

B<AXS_XTICKFONTSIZE, AXS_YTICKFONTSIZE, AXS_XTICKFONTSTYLE,
AXS_YTICKFONTSTYLE>: axis tick number font size and style. See
TITLEFONTSIZE and TITLEFONTSTYLE.

B<AXS_XAUTOTICK>, B<AXS_YAUTOTICK: >configures the automatic tick
spacing. Can be YES or NO. Default: YES. Notice that when enabled the
attributes B< *TICKMAJORSPAN>,B< *TICKDIVISION>, and B<*TICKFORMAT> are
affected during tick computation.

B<AXS_XTICKMAJORSPAN>, B<AXS_YTICKMAJORSPAN>: The spacing between major
ticks. Default is 1 when AUTOTICK is disabled.

B<AXS_XTICKDIVISION>, B<AXS_YTICKDIVISION>: number of minor ticks
intervals between each major tick. Default is 5 when AUTOTICK is
disabled.

B<AXS_XAUTOTICKSIZE, AXS_YAUTOTICKSIZE>: configures the automatic tick
size. Can be YES or NO. Default: YES.

B<AXS_XTICKSIZE, AXS_YTICKSIZE>: size of minor ticks in pixels. Default
is 5 when AUTOTICKSIZE is disabled.

B<AXS_XTICKMAJORSIZE, AXS_YTICKMAJORSIZE>: size of major ticks in
pixels. Default is 8 when AUTOTICKSIZE is disabled.

=over

----

=back

L<ACTIVE|../attrib/iup_active.html>,
L<SCREENPOSITION|../attrib/iup_screenposition.html>,
L<POSITION|../attrib/iup_position.html>,
L<MINSIZE|../attrib/iup_minsize.html>,
L<MAXSIZE|../attrib/iup_maxsize.html>, L<WID|../attrib/iup_wid.html>,
L<TIP|../attrib/iup_tip.html>, L<SIZE|../attrib/iup_size.html>,
L<RASTERSIZE|../attrib/iup_rastersize.html>,
L<ZORDER|../attrib/iup_zorder.html>,
L<VISIBLE|../attrib/iup_visible.html>: also accepted.

=head2 Callbacks

B<DELETE_CB>: Action generated when the Del key is pressed to removed a
sample from a dataset. If multiple points are selected it is called
once for each selected point.

 int function(Ihandle *ih, int index, int sample_index, float x, float y); [in C]
 elem:delete_cb(index, sample_index, x, y: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<index>: index of the dataset

B<sample_index>: index of the sample in the dataset

x: X coordinate value of the sample

B<y>: Y coordinate value of the sample

Returns: If IUP_IGNORE then the sample is not deleted.

B<DELETEBEGIN_CB, DELETEEND_CB>: Actions generated when a delete
operation will begin or end. But they are called only if DELETE_CB is
also defined.

 int function(Ihandle *ih); [in C]
 elem:deletebegin_cb() -> (ret: number) [in Lua]
 elem:deleteend_cb() -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

Returns: If DELETEBEGIN_CB returns IUP_IGNORE the delete operation for
all the selected samples are aborted.

B<SELECT_CB>: Action generated when a sample is selected. If multiple
points are selected it is called once for each new selected point. It
is called only if the selection state of the sample is about to be
changed.

 int function(Ihandle *ih, int index, int sample_index, float x, float y, int select); [in C]
 elem:select_cb(index, sample_index, x, y, select: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<index>: index of the dataset

B<sample_index>: index of the sample in the dataset

x: X coordinate value of the sample

B<y>: Y coordinate value of the sample

B<select>: boolean value that a non zero value indicates if the point
is to be selected.

Returns: If IUP_IGNORE then the sample is not selected.

B<SELECTBEGIN_CB, SELECTEND_CB>: Actions generated when a selection
operation will begin or end. But they are called only if SELECT_CB is
also defined.

 int function(Ihandle *ih); [in C]
 elem:selectbegin_cb() -> (ret: number) [in Lua]
 elem:selectend_cb() -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

Returns: If SELECTBEGIN_CB returns IUP_IGNORE the selection operation
is aborted.

B<EDIT_CB>: Action generated when a sample is selected. If multiple
points are selected it is called once for each new selected point. It
is called only if the selection state of the sample is about to be
changed.

 int function(Ihandle *ih, int index, int sample_index, float x, float y, float *new_x, float *new_y); [in C]
 elem:edit_cb(index, sample_index, x, y, new_x, new_y: number) -> (new_x, new_y, ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<index>: index of the dataset

B<sample_index>: index of the sample in the dataset

x: X coordinate value of the sample

B<y>: Y coordinate value of the sample

B<new_x>: the new X coordinate value of the sample

B<new_y>: the new Y coordinate value of the sample

Returns: If IUP_IGNORE then the sample is not edited. The application
can changed the new value before it is edited.

B<EDITBEGIN_CB, EDITEND_CB>: Actions generated when an editing
operation will begin or end. But they are called only if EDIT_CB is
also defined.

 int function(Ihandle *ih); [in C]
 elem:editbegin_cb() -> (ret: number) [in Lua]
 elem:editend_cb() -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

Returns: If EDITBEGIN_CB returns IUP_IGNORE the editing operation is
aborted.

B<PLOTBUTTON_CB>: similar to L<BUTTON_CB|../call/iup_button_cb.html>
but coordinates are float in plot scale. (since 3.9)

B<PLOTMOTION_CB>: similar to L<MOTION_CB|../call/iup_motion_cb.html>
but coordinates are float in plot scale. (since 3.9)

B<PREDRAW_CB, POSTDRAW_CB>: Actions generated before and after the
redraw operation. Predraw can be used to draw a different background
and Postdraw can be used to draw additional information in the plot.
Predraw has no restrictions, but Postdraw is clipped to the dataset
area. To position elements in plot units, use the B<IupPPlotTransform>
function.

 int function(Ihandle *ih, cdCanvas* cnv); [in C]
 elem:predraw_cb(cnv: cdCanvas) -> (ret: number) [in Lua]
 elem:postdraw_cb(cnv: cdCanvas) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

cnv: the CD canvas where the draw operation occurs.

=over

----

=back

L<MAP_CB|../call/iup_map_cb.html>,
L<UNMAP_CB|../call/iup_unmap_cb.html>,
L<GETFOCUS_CB|../call/iup_getfocus_cb.html>,
L<KILLFOCUS_CB|../call/iup_killfocus_cb.html>,
L<ENTERWINDOW_CB|../call/iup_enterwindow_cb.html>,
L<LEAVEWINDOW_CB|../call/iup_leavewindow_cb.html>,
L<K_ANY|../call/iup_k_any.html>, L<HELP_CB|../call/iup_help_cb.html>:
All common callbacks are supported.

=head2 Examples

L<Browse for Example Files|../../examples/>

[IMAGE]

[IMAGE]

[IMAGE]

[IMAGE]

[IMAGE]

[IMAGE]

=head2 X<SeeAlso>See Also

L<IupCanvas|../elem/iupcanvas.html>, L< IupMglPlot|iup_mglplot.html>

=cut