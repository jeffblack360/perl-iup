=head1 IupMatrix

Creates a matrix of alphanumeric fields. Therefore, all values of the
matrixs fields are strings. The matrix is not a grid container like
many systems have. It inherits from
L<IupCanvas|../elem/iupcanvas.html>.

This is an additional control that depends on the CD library. It is
included in the L<IupControls|../iupcontrols.html> library.

It has two modes of operation: normal and callback mode. In normal
mode, string values are stored in attributes for each cell. In callback
mode these attributes are ignored and the cells are filled with strings
returned by the "VALUE_CB" callback. So the existence of this callback
defines the mode the matrix will operate.

=head2 Creation

 Ihandle* IupMatrix(char *action_cb); [in C]
 iup.matrix{} -> (elem: ihandle) [in Lua]
 matrix(action_cb) [in LED]

B<action_cb>: Name of the action generated when the user types
something.

Returns the identifier of the created matrix, or NULL if an error
occurs.

=head2 Attributes

=head2 General

=over

L<CURSOR|iupmatrix_attrib.html#CURSOR>

L<EDIT_MODE|iupmatrix_attrib.html#EDIT_MODE>

L<EDITNEXT|iupmatrix_attrib.html#EDITNEXT>

L<FOCUS_CELL|iupmatrix_attrib.html#FOCUS_CELL>

L<HIDEFOCUS|iupmatrix_attrib.html#HIDEFOCUS>

L<HIDDENTEXTMARKS|iupmatrix_attrib.html#HIDDENTEXTMARKS>

L<ORIGIN|iupmatrix_attrib.html#ORIGIN>

L<ORIGINOFFSET|iupmatrix_attrib.html#ORIGINOFFSET>

L<READONLY|iupmatrix_attrib.html#READONLY>

L<RESIZEMATRIX|iupmatrix_attrib.html#RESIZEMATRIX>

L<USETITLESIZE|iupmatrix_attrib.html#USETITLESIZE>

=back

=head2 Cell

=over

L<L:C|iupmatrix_attrib.html#L:C>

L<BGCOLOR|iupmatrix_attrib.html#BGCOLOR>

L<FGCOLOR|iupmatrix_attrib.html#FGCOLOR>

L<FONT|iupmatrix_attrib.html#FONT>

L<FRAMECOLOR|iupmatrix_attrib.html#FRAMECOLOR>

L<VALUE|iupmatrix_attrib.html#VALUE>

L<CELLBGCOLOR|iupmatrix_attrib.html#CELLBGCOLOR>

L<CELLFGCOLOR|iupmatrix_attrib.html#CELLFGCOLOR>

L<CELLOFFSET|iupmatrix_attrib.html#CELLOFFSET>

L<CELLSIZE|iupmatrix_attrib.html#CELLSIZE>

=back

=head2 Column

=over

L<ALIGNMENTn|iupmatrix_attrib.html#ALIGNMENTn>

L<SORTSIGNn|iupmatrix_attrib.html#SORTSIGNn>

=back

=head2 Column Size

=over

L<RASTERWIDTHn|iupmatrix_attrib.html#RASTERWIDTHn>

L<WIDTHn|iupmatrix_attrib.html#WIDTHn>

L<WIDTHDEF|iupmatrix_attrib.html#WIDTHDEF>

=back

=head2 Line Size

=over

L<HEIGHTn|iupmatrix_attrib.html#HEIGHTn>

L<HEIGHTDEF|iupmatrix_attrib.html#HEIGHTDEF>

L<RASTERHEIGHTn|iupmatrix_attrib.html#RASTERHEIGHTn>

=back

=head2 Number of Cells

=over

L<ADDCOL|iupmatrix_attrib.html#ADDCOL>

L<ADDLIN|iupmatrix_attrib.html#ADDLIN>

L<DELCOL|iupmatrix_attrib.html#DELCOL>

L<DELLIN|iupmatrix_attrib.html#DELLIN>

L<NUMCOL|iupmatrix_attrib.html#NUMCOL>

L<NUMCOL_VISIBLE|iupmatrix_attrib.html#NUMCOL_VISIBLE>

L<NUMCOL_NOSCROLL|iupmatrix_attrib.html#NUMCOL_NOSCROLL>

L<NUMLIN|iupmatrix_attrib.html#NUMLIN>

L<NUMLIN_VISIBLE|iupmatrix_attrib.html#NUMLIN_VISIBLE>

L<NUMLIN_NOSCROLL|iupmatrix_attrib.html#NUMLIN_NOSCROLL>

=back

=head2 Mark Attributes

=over

L<MARKAREA|iupmatrix_attrib.html#MARKAREA>

L<MARKMODE|iupmatrix_attrib.html#MARKMODE>

L<MARK|iupmatrix_attrib.html#MARK>

L<MARKED|iupmatrix_attrib.html#MARKED>

L<MARKMULTIPLE|iupmatrix_attrib.html#MARKMULTIPLE>

=back

=head2 Action Attributes

=over

L<FITTOSIZE|iupmatrix_attrib.html#FITTOSIZE>

L<FITTOTEXT|iupmatrix_attrib.html#FITTOTEXT>

L<SHOW|iupmatrix_attrib.html#SHOW>

L<REDRAW|iupmatrix_attrib.html#REDRAW>

=back

=head2 Text Editing Attributes

=over

L<CARET|iupmatrix_attrib.html#CARET>

L<MASKL:C|iupmatrix_attrib.html#MASKL:C>

L<MULTILINE|iupmatrix_attrib.html#MULTILINE>

L<SELECTION|iupmatrix_attrib.html#SELECTION>

=back

=head2 Canvas Attributes

=over

L<BORDER|iupmatrix_attrib.html#BORDER>

L<SCROLLBAR|iupmatrix_attrib.html#SCROLLBAR>

=back

=head2 Callbacks

=head2 Interaction

L<ACTION_CB|iupmatrix_cb.html#ACTION_CB> - Action generated when a
keyboard event occurs.

CLICK_CB - Action generated when any mouse button is pressed over a
cell.

L<RELEASE_CB|iupmatrix_cb.html#RELEASE_CB> - Action generated when any
mouse button is released over a cell.

L<MOUSEMOVE_CB|iupmatrix_cb.html#MOUSEMOVE_CB> - Action generated to
notify the application that the mouse has moved over the matrix.

L<ENTERITEM_CB|iupmatrix_cb.html#ENTERITEM_CB> - Action generated when
a matrix cell is selected, becoming the current cell.

LEAVEITEM_CB - Action generated when a cell is no longer the current
cell.

L<SCROLLTOP_CB|iupmatrix_cb.html#SCROLL_CB> - Action generated when the
matrix is scrolled with the scrollbars or with the keyboard.

=head2 Drawing

L<BGCOLOR_CB|iupmatrix_cb.html#BGCOLOR_CB> - Action generated to
retrieve the background color of a cell when it needs to be redrawn.

L<FGCOLOR_CB|iupmatrix_cb.html#FGCOLOR_CB> - Action generated to
retrieve the foreground color of a cell when it needs to be redrawn.

L<FONT_CB|iupmatrix_cb.html#FONT_CB> - Action generated to retrieve the
font of a cell when it needs to be redrawn.

L<DRAW_CB|iupmatrix_cb.html#DRAW_CB> - Action generated before the cell
is drawn. Allow a custom cell draw.

L<DROPCHECK_CB|iupmatrix_cb.html#DROPCHECK_CB> - Action generated to
determine if a dropdown feedback should be shown.

=head2 Editing

L<DROP_CB|iupmatrix_cb.html#DROP_CB> - Action generated to determine if
a text field or a dropdown will be shown.

L<MENUDROP_CB|iupmatrix_cb.html#MENUDROP_CB> - Action generated to
determine if a popup menu will be shown.

L<DROPSELECT_CB|iupmatrix_cb.html#DROPSELECT_CB> - Action generated
when an element in the dropdown list is selected.

EDITION_CB - Action generated when the current cell enters or leaves
the edition mode.

=head2 Callback Mode

L<VALUE_CB|iupmatrix_cb.html#VALUE_CB> - Action generated to verify the
value of a cell.

L<VALUE_EDIT_CB|iupmatrix_cb.html#VALUE_EDIT_CB> - Action generated to
notify the application that the value of a cell was edited.

L<MARK_CB|iupmatrix_cb.html#MARK_CB> - Action generated to verify the
selection state of a cell.

MARKEDIT_CB - Action generated to notify the application that the
selection state of a cell was changed.

=head2 Utility Functions

These functions can be used to help set and get attributes from the
matrix:

 void  IupSetAttributeId2(Ihandle* ih, const char* name, int lin, int col, const char* value);
 char* IupGetAttributeId2(Ihandle* ih, const char* name, int lin, int col);
 int   IupGetIntId2(Ihandle* ih, const char* name, int lin, int col);
 float IupGetFloatId2(Ihandle* ih, const char* name, int lin, int col);
 void  IupSetfAttributeId2(Ihandle* ih, const char* name, int lin, int col, const char* format, ...);
 void  IupSetIntId2(Ihandle* ih, const char* name, int lin, int col, int value);
 void  IupSetFloatId2(Ihandle* ih, const char* name, int lin, int col, float value);

They work just like the respective traditional set and get functions.
But the attribute string is complemented with the L and C values. When
only one value is needed then use the Iup*AttributeId functions. For
ex:

 IupSetAttribute(ih, "30:10", value)        => IupSetAttributeId2(ih, "", 30, 10, value)
 IupSetAttribute(ih, "BGCOLOR30:10", value) => IupSetAttributeId2(ih, "BGCOLOR", 30, 10, value)
 IupSetAttribute(ih, "ALIGNMENT10", value)  => IupSetAttributeId(ih, "ALIGNMENT", 10, value)

When one of the indices is the asterisk, use IUP_INVALID_ID as the
parameter. For ex:

 IupSetAttribute(ih, "BGCOLOR30:*", value) => IupSetAttributeId2(ih, "BGCOLOR", 30, IUP_INVALID_ID, value)

These functions are faster than the traditional functions because they
do not need to parse the attribute name string and the application does
not need to concatenate the attribute name with the id.

They are used by the additional methods in Lua:

 elem:setcell(lin, col: number, value: string)
 elem:getcell(lin, col: number) -> (cell: string)

But you can also use the traditional functions when typing:

 elem["bgcolor"..l..":"..c] = v
    or
 elem["bgcolor30:10"] = v

=head2 Notes

=head2 Storage

Before mapped to the native system, all attributes are stored in the
hash table, independently from the size of the matrix or its operation
mode. The action attributes like ADDLIN and DELCOL will NOT work.

When the matrix is mapped, and it is NOT in callback mode, then the
cell values and mark state are moved from the hash table to an internal
storage at the matrix. Other cell attributes remains on the hash table.
Cell values with indices greater than (NUMLIN,NUMCOL) are ignored. When
in callback mode cell values stored in the hash table are ignored.

=head2 Callback Mode

Very large matrices can use the callback mode to store the cell values
at the application, and not at the internal matrix storage. The idea is
the following:

1 - Register the VALUE_CB callback

2 - No longer set the value of the cells. Store the cell value at the
application. They will be retreived one by one by the callback.

3 - If the matrix can be edited, set the VALUE_EDIT_CB callback.

4 - When the matrix display must be updated, use the REDRAW attribute
to force a matrix redraw.

A negative aspect is that, when VALUE_CB is defined, after it is mapped
the matrix never verifies attributes of type L:C again.

If VALUE_CB is defined and VALUE_EDIT_CB is not defined when the matrix
is mapped then READONLY will be set to YES.

=head2 Number of Cells

If you do not plan to use ADDLIN nor ADDCOL, and plan to set sparse
cell values, then you must set NUMLIN and NUMCOL before mapping.

=head2 Titles

A matrix might have titles for lines and columns. Titles are always non
scrollable, non editable and presented with a different default
background color. A matrix will have a line of titles if an attribute
of the "I<L>:0" type is defined, where L is a line number, or if the
HEIGHT0 attribute is defined. It will have a column of titles if an
attribute of the "0:I<C>" type is defined, where C is a column number,
or if the WIDTH0 attribute is defined.

When allowed the width of a column can be changed by holding and
dragging its title right border, see RESIZEMATRIX.

Any cell can have more than one text line, just use the \n control
character. Multiple text lines will be considered when calculating the
title cell size based on its contents. The contents of ordinary cells
(not a title) do not affect the cell size.

=head2 Natural Size

The Natural size is calculated using only the title cells size plus the
size of NUMCOL_VISIBLE and NUMLIN_VISIBLE cells, but it is also
affected if SCROLBAR is enabled. The natural height is the sum of the
line heights from line 0 to NUMLIN_VISIBLE (inclusive). The natural
width is the sum of the column width from column 0 to NUMCOL_VISIBLE
(inclusive). Notice that since NUMCOL_VISIBLE and NUMLIN_VISIBLE do not
include the titles then NUMCOL_VISIBLE+1 columns and NUMLIN_VISIBLE+1
lines are included in the sum.

The height of a line L depends on several attributes, first it checks
the HEIGHTI<L> attribute, then checks RASTERHEIGHTI<L>, then when
USETITLESIZE=YES or not in callback mode the height of the title text
for the line or if L=0 it searches for the highest column title, if
still could not define a height then if L!=0 it will use HEIGHTDEF, if
L=0 then height will be 0.

A similar approach is valid for the column width. The width of a column
C first checks the WIDTHI<C> attribute, then checks RASTERWIDTHI<C>,
then when USETITLESIZE=YES or not in callback mode the width of the
title text for the column or if C=0 it searches for the widest line
title, if still could not define a width then if C!=0 it will use
WIDTHDEF, if C=0 then height will be 0.

=head2 Virtual Size

When the scrollbars are enabled if the matrix area is greater than the
visible area then scrollbars will be displayed so the cells can be
scrolled to be visible area. When dragging the scrollbar the position
of cells is free, when clicking on its buttons it will move in cell
steps, aligning to the left border of the cell.

By default EXPAND=Yes, so matrix will be automatically resized when the
dialog is resized. So more columns and lines will be displayed. But the
matrix Natural size will be used as minimum size. To remove the minimum
size limitation set NUMCOL_VISIBLE and NUMLIN_VISIBLE to 0 after
showing it for the first time.

=head2 Keyboard Navigation

Keyboard navigation through the matrix cells outside the edition mode
is done by using the following keys:

=over

=item * B<Arrows>: Moves the focus to the next cell, according to the
arrows direction.

=item * B<Page Up> and B<Page Down>: Moves a visible page up or down.

=item * B<Home>: Moves the focus to the fist column in the line.

=item * B<Home> B<Home>: Moves the focus to the upper left corner of
the visible page.

=item * B<Home> B<Home> B<Home>: Moves the focus to the upper left
corner of the first page of the matrix.

=item * B<End>: Moves the focus to the last column in the line.

=item * B<End> B<End>: Moves the focus to the lower right corner of the
visible page.

=item * B<End> B<End> B<End>: Moves the focus to the lower right corner
of the last page in the matrix.

=back

When using the keyboard to change the focus cell if the limit of the
visible area is reached then the cells are automatically scrolled. Also
if a cell partially visible is edited then first it is scrolled to the
visible area. Also while pressing together the B<Shift> key and marks
are enabled with MARKMULTIPLE=Yes then a continuous area will be
selected (since 3.9).

When the matrix is outside the edition mode, pressing any character key
makes the current key to enter in the edition mode, the old text is
replaced by the new one being typed. If B<F2, Enter> or B<Space> is
pressed, the current cell enters the edition mode with the current text
of the cell. Double-clicking a cell also enters the edition mode (in
Motif the user must click again to the edit control get the focus).

Inside the B<edition mode>, the following keys are used for a text
field:

=over

=item * B<Left, Right, Up and Down arrows>: if the caret is at the
extremes of the text being edited then leave the edition mode and moves
the focus accordingly. The value is confirmed.

=item * B<Ctrl + arrows>: leave the edition mode and moves the focus
accordingly independent of caret position. The value is confirmed.

=item * B<Enter>: leave the edition mode. The value is confirmed. Moves
the focus to the cell below.

=item * B<Esc>: leave the edition mode. The new value is ignored and
the old value remains.

=back

The cell will also leave the edition mode if the user clicked in
another cell or in another control, then the value will be confirmed.
When pressing B<Enter> to confirm the value the focus goes to the cell
below the current cell, if at the last line then the focus goes to the
cell on the left. The value confirmation depends on the EDITION_CB
callback return code.

=head2 Marks (Selected Cells)

When a mark mode is set the cells can be marked using mouse.

A marked cell will have its background attenuated to indicate that it
is marked. A title cell appears marked only when MARKMODE=LIN, COL or
LINCOL.

Cells can be selected individually or can be restricted to lines or
columns. Also multiple cells can be marked simultaneously in continuous
or in segmented areas. Lines and columns are marked only when the user
clicks in their respective titles, if MARKMODE=CELL then all the cells
of the line or column will be marked. Continuous areas are marked
holding and dragging the mouse or holding the B<Shift> key when
clicking at the end of the area. Segmented areas are marked or unmarked
holding the B<Ctrl> key, the mark state is inverted. Clicking on the
cell 0:0 will select all the items depending on MARKMODE, except for
LINCOL.

When there are cells marked, pressing the B<Del> key remove the
selected cells contents.

=head2 Examples

L<Browse for Example Files|../../examples/>

[IMAGE]

[IMAGE]

=head2 X<SeeAlso>See Also

L<IupCanvas|../elem/iupcanvas.html>

=cut