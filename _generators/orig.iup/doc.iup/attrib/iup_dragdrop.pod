=head1 DRAG & DROP (since 3.6)

When enabled allow the use of callbacks for controlling the drag and
drop handling.

The user starts a drag and drop transfer by pressing the mouse button
over the data (Windows and GTK: left button; Motif: middle button)
which is referred to as the drag source. The data can be dropped in any
location that has been registered as a drop target. The drop occurs
when the user releases the mouse button. This can be done inside a
control, from one control to another in the same dialog, in different
dialogs of the same application, or between different applications (the
other application does NOT need to be implemented with IUP).

In IUP, a drag and drop transfer can result in the data being moved or
copied. A B<copy> operation is enabled with the CTRL key pressed. A
B<move> operation is enabled with the SHIFT key pressed. A move
operation will be possible only if the attribute DRAGSOURCEMOVE is Yes.
When no key is pressed the default operation is B<copy> when
DRAGSOURCEMOVE=No and B<move> when DRAGSOURCEMOVE=Yes. The user can
cancel a drag at any time by pressing the ESCAPE key.

Steps to use the Drag & Drop support in an IUP application:

=over

=item * B<AT SOURCE:>

=over

=item * Enable the element as source using the attribute
DRAGSOURCE=YES;

=item * Define the data types supported by the element for the drag
operation using the DRAGTYPES attribute;

=item * Register the required callbacks DRAGBEGIN_CB, DRAGDATASIZE_CB
and DRAGDATA_CB for drag handling. DRAGEND_CB is the only optional drag
callback, all other callbacks and attributes must be set.

=back

=item * B<AT TARGET:>

=over

=item * Enable the element as target using the attribute
DROPTARGET=YES;

=item * Define the data types supported by the element for the drop
using the DROPTYPES attribute;

=item * Register the required callback DROPDATA_CB for handling the
data received. This callback and all the drop target attributes must be
set too. DROPMOTION_CB is the only optional drop callback.

=back

=back

=head2 Affects

L<IupLabel|../elem/iuplabel.html>, L<IupText|../elem/iuptext.html>,
L<IupList|../elem/iuplist.html>, L<IupTree|../elem/iuptree.html>,
L<IupCanvas|../elem/iupcanvas.html> and
L<IupDialog|../dlg/iupdialog.html>.

=head2 Attributes at Drag Source

B<DRAGSOURCE>B< (non inheritable):> Set up a control as a source for
drag operations. Default: NO.

B<DRAGTYPES>B< (non inheritable):> A list of data types that are
supported by the source. Accepts a string with one or more names
separated by commas. See L<Notes|#Notes> bellow for a list of known
names. Must be set.

B<DRAGSOURCEMOVE (non inheritable)>: Enables the move action. Default:
NO (only copy is enabled).

=head2 Attributes at Drop Target

B<DROPTARGET>B< (non inheritable)>: Set up a control as a destination
for drop operations. Default: NO.

B<DROPTYPES (non inheritable)>: A list of data types that are supported
by the target. Accepts a string with one or more names separated by
commas. See L<Notes|#Notes> bellow for a list of known names. Must be
set.

=head2 Callbacks at Drag Source (Must be set when DRAGSOURCE=Yes)

B<DRAGBEGIN_CB>: notifies source that drag started. It is called when
the mouse starts a drag operation.

 int function(Ihandle* ih, int x, int y) [in C]elem:dragbegin_cb(x, y: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<x, y>: cursor position relative to the top-left corner of the
element.

Returns: If IUP_IGNORE is returned the drag is aborted.

B<DRAGDATASIZE_CB>: request for size of drag data from source. It is
called when the data is dropped, before the B<DRAGDATA_CB> callback.

 int function(Ihandle* ih, char* type) [in C]elem:dragdatasize_cb(type: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<type>: type of the data. It is one of the registered types in
B<DRAGTYPES>.

Returns: the size in bytes for the data. It will be used to allocate
the buffer size for the data in transfer.

B<DRAGDATA_CB>: request for drag data from source. It is called when
the data is dropped.

 int function(Ihandle* ih, char* type, void* data, int size) [in C]elem:dragdata_cb(type: string, data: userdata, size: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<type>: type of the data. It is one of the registered types in
B<DRAGTYPES>.

B<data>: buffer to be filled by the application. In Lua is a light
userdata.

B<size>: buffer size in bytes. The same value returned by
B<DRAGDATASIZE_CB.>

B<DRAGEND_CB>: notifies source that drag is done. The only drag
callback that is B<optional>. It is called after the data has been
dropped.

 int function(Ihandle* ih, int action) [in C]elem:dragend_cb(action: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<action>: action performed by the operation (1 = move, 0 = copy, -1 =
drag failed or aborted)

If action is 1 it is responsibility of the application to remove the
data from source.

=head2 Callbacks at Drop Target (Must be set when DROPTARGET=Yes)

B<DROPDATA_CB>: source has sent target the requested data. It is called
when the data is dropped. If both drag and drop would be in the same
application it would be called after the B<DRAGDATA_CB> callback.

 int function(Ihandle* ih, char* type, void* data, int size, int x, int y) [in C]elem:dropdata_cb(type: string, data: userdata, size, x, y: number) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<type>: type of the data. It is one of the registered types in
B<DROPTYPES>.

B<data>: content data received in the drop operation. In Lua is a light
userdata.

B<size>: data size in bytes.

B<x, y>: cursor position relative to the top-left corner of the
element.

B<DROPMOTION_CB>: notifies destination about drag pointer motion. The
only drop callback that is B<optional>. It is called when the mouse
moves over any valid drop site.

 int function(Ihandle *ih, int x, int y, char *status); [in C]
 elem:dropmotion_cb(x, y: number, status: string) -> (ret: number) [in Lua]

B<ih>: identifier of the element that activated the event.

B<x>, B<y>: position in the canvas where the event has occurred, in
pixels.

B<status>: status of mouse buttons and certain keyboard keys at the
moment the event was generated. The same macros used for
L<BUTTON_CB|../call/iup_button_cb.html> can be used for this status.

=head2 Notes

Drag and Drop support can be set independently. A control can have drop
without drag support and vice-versa.

Here are some common Drag&Drop types defined by existing applications:

=over

=item * "TEXT" used for regular text without formatting. Automatically
translated to CF_TEXT in Windows.

=item * content MIME types, like "text/uri-list", "text/html",
"image/png", "image/jpeg", "image/bmp" and "image/gif".

=item * "UTF8_STRING" in GTK and "UNICODETEXT" in Windows.

=item * "COMPOUND_TEXT" in GTK and "Rich Text Format" in Windows.

=item * "BITMAP" and "DIB" in Windows. Automatically translated to
CF_BITMAP and CF_DIB.

=back

=head2 Examples

L<list2.c|../../examples/C/list2.c>

=cut