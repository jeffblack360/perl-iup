=head1 FONT (since 3.0)

Character font of the text shown in the element. See L<
FONT|iup_font2.html> definition up to IUP 2.x. Although it is an
inheritable attribute, it is defined only on elements that have a
native representation.

=head2 Value

Font description containing typeface, style and size. Default: the
global attribute DEFAULTFONT.

The common format definition is similar to the the L<
Pango|http://www.pango.org/> library Font Description, used by GTK+. It
is defined as having 3 parts: "E<lt>font faceE<gt>B<,> E<lt>font
stylesE<gt> E<lt>font sizeE<gt>".

Font face is the font face name, and can be any name. Although only
names recognized by the system will be actually used. The names
Helvetica, Courier and Times are always accepted in all systems.

The supported font style is a combination of: B<Bold>, B<Italic>, B<
Underline> and B<Strikeout>. The Pango format include many other
definitions not supported by the common format, they are supported only
by the GTK driver. Unsupported values are simply ignored. The names
must be in the same case describe here.

Font size is in points (1/72 inch) or in pixels (using negative
values).

The old L<Font Names|iup_font2.html#Font_Names> are still supported.
The old Windows L< FONT|iup_font2.html> format is still supported in
the Windows driver.

Returned values will be the same value when changing the attribute,
except for the old font names that will be converted to the new common
format definition.

=head2 Windows

The DEFAULTFONT is retrieved from the System Settings (see below), if
this failed then "Tahoma, 10" for Windows XP, or "Segoe UI, 9" since
Windows Vista, is assumed.

The native handle can be obtained using the "B<HFONT>" attribute.

In "Control Panel", open the "Display Properties" then click on
"Advanced" and select "Message Box" and change its Font to affect the
default font for applications. In Vista go to "Window Color and
Appearance", then "Open Classic Appearance", then Advanced.

=head2 Motif

The DEFAULTFONT is retrieved from the user resource file (see below),
if failed then "Fixed, 11" is assumed.

The X-Windows Logical Font Description format (XLFD) is also supported.

The native handle can be obtained using the "B<XMFONTLIST>" and
"B<XFONTSTRUCT>" attributes. The selected X Logical Font Description
string can be obtained from the attribute "B<XLFD>".

You can use the B<xfontsel> program to obtain a string in the X-Windows
Logical Font Description format (XLFD). Noticed that the first size
entry of the X-Windows font string format (B<pxlsz>) is in pixels and
the next one (B<ptSz>) is in deci-points (multiply the value in points
by 10).

Be aware that the resource files ".Xdefaults" and "Iup" in the user
home folder can affect the default font and many others visual
appearance features in Motif.

=head2 GTK

The DEFAULTFONT is retrieved from the style defined by GNOME (see
below), if failed "Sans, 10" is assumed.

The X-Windows Logical Font Description format (XLFD) is also supported.

The native handle can be obtained using the "B<PANGOFONTDESC>"
attribute.

Font face can be a list of fonts face names in GTK. For example
"Arial,Helvetica, 12". Not accepted in the other drivers.

Style can also be a combination of: Small-Caps,
[Ultra-Light|Light|Medium|Semi-Bold|Bold|Ultra-Bold|Heavy],
[Ultra-Condensed|Extra-Condensed|Condensed|Semi-Condensed|Semi-Expanded|Expanded|Extra-Expanded|Ultra-Expanded].
Those values can be used only when the string is a full Pango compliant
font, i.e. no underline, no strikeout and sizeE<gt>0.

In GNOME, go to the "Appearance Preferences" tool, then in the Fonts
tab change the Applications Font to affect the default font.

=head2 Examples:

 "Times, Bold 18"
 "Arial, 24" (no style)
 "Courier New, Italic Underline -30" (size in pixels)

=head2 Affects

All elements, since the SIZE attribute depends on the FONT attribute,
except for menus.

=head2 Notes

When FONT is changed and L<SIZE|iup_size.html> is set, then
L<RASTERSIZE|iup_rastersize.html> is also updated.

Since font face names are not a standard between Windows, Motif and
GTK, a few names are specially handled to improve application
portability. If you want to use names that work for all systems we
recommend using: Courier, Times and Helvetica (same as Motif). Those
names always have a native system name equivalent. If you use those
names IUP will automatically map to the native system equivalent. See
the table below:

Motif

Windows

GTK

Description

B<Helvetica>

Arial

Sans

without serif, variable spacing

B<Courier>

Courier New

Monospace

with serif, fixed spacing

B<Times>

Times New Roman

Serif

with serif, variable spacing

=head2 Auxiliary Attributes

They will change the FONT attribute, and depends on it. They are used
only to set partial FONT parameters of style and size. To do that the
FONT attribute is parsed, changed and updated to the new value in the
common format definition. This means that if the attribute was set in
X-Windows format or in the old Windows and IUP formats, the previous
value will be replaced by a new value in the common format definition.
Pango additional styles will also be removed.

=head2 FONTSTYLE (non inheritable)

Replaces or returns the style of the current FONT attribute. Since font
styles are case sensitive, this attribute is also case sensitive.

=head2 FONTSIZE (non inheritable)

Replaces or returns the size of the current FONT attribute.

=head2 FONTFACE (read-only, non inheritable)

Returns the face name of the current FONT attribute.

=head2 X<CHARSIZE>CHARSIZE (read-only, non inheritable)

Returns the average character size of the current FONT attribute. This
is the factor used by the SIZE attribute to convert its units to
pixels.

=head2 FOUNDRY [Motif Only] (non inheritable)

Allows to select a foundry for the FONT being selected. Must be set
before setting the FONT attribute.

=head2 Encoding

The number that represents each character is dependent on the encoding
used. For example, in ASCII encoding the letter A has code 65, but
codes above 128 can be very different according to the encoding. An
encoding is defined by a charset.

IUP uses the default locale in ANSI-C. This means that it does not
adopts a specific charset, and so the results can be different if the
developer charset is different than the run time charset where the user
is running the application. For example, if the developer is using a
charset, and its user is also using the same encoding, then everything
will work fine without the need of text encoding conversions. The
advantage is that any charset can be used, and localization is usually
done in that way.

Since version 3.9, IUP supports also the L<UTF-8|#UTF-8> (ISO10646-1)
encoding in the GTK and Windows driver. To specify string in UTF-8
encoding set the "UTF8MODE" attribute to "Yes".

=head2 ISO8859-1 and Windows-1252 Displayable Characters

The Latin-1 charset (ISO8859-1) defines an encoding for all of the
characters used in Western languages. It is the most common encoding,
besides L<UTF-8|#UTF-8>.

The first half of Latin-1 is standard ASCII (128 characters), while the
second half (with the highest bit set) contains accented characters
needed for Western languages other than English. In Windows, the
ISO8859-1 charset was changed, and some control characters were
replaced to include more display characters, this new charset is named
Windows-1252 (these characters are marked in the table below with thick
borders).

32

!

I<B<33>>

"

I<B<34>>

#

I<B<35>>

$

I<B<36>>

%

I<B<37>>

&

I<B<38>>

'

I<B<39>>

(

I<B<40>>

)

I<B<41>>

*

I<B<42>>

+

I<B<43>>

,

I<B<44>>

-

I<B<45>>

.

I<B<46>>

/

I<B<47>>

0

I<B<48>>

1

I<B<49>>

2

I<B<50>>

3

I<B<51>>

4

I<B<52>>

5

I<B<53>>

6

I<B<54>>

7

I<B<55>>

8

I<B<56>>

9

I<B<57>>

:

I<B<58>>

;

I<B<59>>

E<lt>

I<B<60>>

E<61>

I<B<61>>

E<gt>

I<B<62>>

?

I<B<63>>

@

I<B<64>>

A

I<B<65>>

B

I<B<66>>

C

I<B<67>>

D

I<B<68>>

E

I<B<69>>

F

I<B<70>>

G

I<B<71>>

H

I<B<72>>

I

I<B<73>>

J

I<B<74>>

K

I<B<75>>

L

I<B<76>>

M

I<B<77>>

N

I<B<78>>

O

I<B<79>>

P

I<B<80>>

Q

I<B<81>>

R

I<B<82>>

S

I<B<83>>

T

I<B<84>>

U

I<B<85>>

V

I<B<86>>

W

I<B<87>>

X

I<B<88>>

Y

I<B<89>>

Z

I<B<90>>

[

I<B<91>>

\

I<B<92>>

]

I<B<93>>

^

I<B<94>>

_

I<B<95>>

`

I<B<96>>

a

I<B<97>>

b

I<B<98>>

c

I<B<99>>

d

I<B<100>>

e

I<B<101>>

f

I<B<102>>

g

I<B<103>>

h

I<B<104>>

i

I<B<105>>

j

I<B<106>>

k

I<B<107>>

l

I<B<108>>

m

I<B<109>>

n

I<B<110>>

o

I<B<111>>

p

I<B<112>>

q

I<B<113>>

r

I<B<114>>

s

I<B<115>>

t

I<B<116>>

u

I<B<117>>

v

I<B<118>>

w

I<B<119>>

x

I<B<120>>

y

I<B<121>>

z

I<B<122>>

{

I<B<123>>

|

I<B<124>>

}

I<B<125>>

~

I<B<126>>

I<B<127>>

I<B<128>>

I<B<129>>

I<B<130>>

I<B<131>>

I<B<132>>

I<B<133>>

I<B<134>>

I<B<135>>

I<B<136>>

I<B<137>>

I<B<138>>

I<B<139>>

I<B<140>>

I<B<141>>

I<B<142>>

I<B<143>>

I<B<144>>

I<B<145>>

I<B<146>>

I<B<147>>

I<B<148>>

I<B<149>>

I<B<150>>

I<B<151>>

I<B<152>>

I<B<153>>

I<B<154>>

I<B<155>>

I<B<156>>

I<B<157>>

I<B<158>>

I<B<159>>

I<B<160>>

I<B<161>>

I<B<162>>

I<B<163>>

I<B<164>>

I<B<165>>

I<B<166>>

I<B<167>>

I<B<168>>

I<B<169>>

I<B<170>>

I<B<171>>

I<B<172>>

I<B<173>>

I<B<174>>

I<B<175>>

I<B<176>>

I<B<177>>

I<B<178>>

I<B<179>>

I<B<180>>

I<B<181>>

I<B<182>>

I<B<183>>

I<B<184>>

I<B<185>>

I<B<186>>

I<B<187>>

I<B<188>>

I<B<189>>

I<B<190>>

I<B<191>>

I<B<192>>

I<B<193>>

I<B<194>>

I<B<195>>

I<B<196>>

I<B<197>>

I<B<198>>

I<B<199>>

I<B<200>>

I<B<201>>

I<B<202>>

I<B<203>>

I<B<204>>

I<B<205>>

I<B<206>>

I<B<207>>

I<B<208>>

I<B<209>>

I<B<210>>

I<B<211>>

I<B<212>>

I<B<213>>

I<B<214>>

I<B<215>>

I<B<216>>

I<B<217>>

I<B<218>>

I<B<219>>

I<B<220>>

I<B<221>>

I<B<222>>

I<B<223>>

I<B<224>>

I<B<225>>

I<B<226>>

I<B<227>>

I<B<228>>

I<B<229>>

I<B<230>>

I<B<231>>

I<B<232>>

I<B<233>>

I<B<234>>

I<B<235>>

I<B<236>>

I<B<237>>

I<B<238>>

I<B<239>>

I<B<240>>

I<B<241>>

I<B<242>>

I<B<243>>

I<B<244>>

I<B<245>>

I<B<246>>

I<B<247>>

I<B<248>>

I<B<249>>

I<B<250>>

I<B<251>>

I<B<252>>

I<B<253>>

I<B<254>>

I<B<255>>

Punctuation and Symbols

Numbers

Letters

Accented

Adapted from L<
http:E<47>E<47>en.wikipedia.orgE<47>wikiE<47>Windows-1252|http://en.wikipedia.org/wiki/Windows-1252>.

=head2 UTF-8

"Universal character set Transformation Format - 8 bits" is part of the
Unicode standard that is used in most modern Web applications and it is
becoming widely used in desktop applications too.

It allows the application to use a regular "char*" for strings, but it
is a variable width encoding, meaning that a single character may have
up to four bytes in sequence. And the code "\0" is still used as a
string terminator (NULL). So all the regular B<strstr>, B<strcmp>,
B<strlen>, B<strcpy> and B<strcat> functions will work normally, except
B<strchr> because it will search only for 1 byte characters. Notice
that B<strlen> will return the number of bytes, not the number of
multi-byte charcters. And B< strcmp> will compare byte encodings.

The first 128 characters of Unicode, which correspond one-to-one with
L<ASCII|http://en.wikipedia.org/wiki/ASCII>, are encoded using a single
octet with the same binary value as ASCII, making valid ASCII text
valid UTF-8-encoded Unicode as well. If the highest bit is 1 then one
to three more bytes will follow to the define the actual character
encoding. The number of bytes following is determined by the number of
bits set to 1 after the highest bit.

The next 1920 characters need two bytes to encode. This covers the
remainder of almost all L<Latin-derived
alphabets|http://en.wikipedia.org/wiki/Latin-derived_alphabet>, and
also L< Greek|http://en.wikipedia.org/wiki/Greek_alphabet>,
L<Cyrillic|http://en.wikipedia.org/wiki/Cyrillic_script>,
L<Coptic|http://en.wikipedia.org/wiki/Coptic_alphabet>,
L<Armenian|http://en.wikipedia.org/wiki/Armenian_alphabet>,
L<Hebrew|http://en.wikipedia.org/wiki/Hebrew_alphabet>,
L<Arabic|http://en.wikipedia.org/wiki/Arabic_alphabet>,
L<Syriac|http://en.wikipedia.org/wiki/Syriac_alphabet> and
L<Tna|http://en.wikipedia.org/wiki/Tna> alphabets, as well as
L<Combining Diacritical
Marks|http://en.wikipedia.org/wiki/Combining_Diacritical_Marks>. Three
bytes are needed for characters in the rest of the L<Basic Multilingual
Plane|http://en.wikipedia.org/wiki/Mapping_of_Unicode_character_planes>
(which contains virtually all characters in common
useL<[11]|http://en.wikipedia.org/wiki/UTF-8#cite_note-unicode-ch02-bmp-11>).
Four bytes are needed for characters in the L<other planes of
Unicode|http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters>,
which include less common L<CJK
characters|http://en.wikipedia.org/wiki/CJK_characters> and various
historic scripts and mathematical symbols.

The bytes 0xFE and 0xFF do not appear, so a valid UTF-8 string can
cannot be confused with an UTF-16 sequence.

The second half (128-255) of the Latin-1 charset characters found in
the previous table, are called "Latin-1 Supplement" in the Unicode
standard. They all have two bytes, except some of the additional
Windows 1252 characters. And they have the following encoding in UTF-8
(codes in hexadecimal):

E2 82 AC

E2 80 9A

C6 92

E2 80 9E

E2 80 A6

E2 80 A0

E2 80 A1

CB 86

E2 80 B0

C5 A0

E2 80 B9

C5 92

C5 BD

E2 80 98

E2 80 99

E2 80 9C

E2 80 9D

E2 80 A2

E2 80 93

E2 80 94

CB 9C

E2 84 A2

C5 A1

E2 80 BA

C5 93

C5 BE

C5 B8

C2 A0

C2 A1

C2 A2

C2 A3

C2 A4

C2 A5

C2 A6

C2 A7

C2 A8

C2 A9

C2 AA

C2 AB

C2 AC

C2 AD

C2 AE

C2 AF

C2 B0

C2 B1

C2 B2

C2 B3

C2 B4

C2 B5

C2 B6

C2 B7

C2 B8

C2 B9

C2 BA

C2 BB

C2 BC

C2 BD

C2 BE

C2 BF

C3 80

C3 81

C3 82

C3 83

C3 84

C3 85

C3 86

C3 87

C3 88

C3 89

C3 8A

C3 8B

C3 8C

C3 8D

C3 8E

C3 8F

C3 90

C3 91

C3 92

C3 93

C3 94

C3 95

C3 96

C3 97

C3 98

C3 99

C3 9A

C3 9B

C3 9C

C3 9D

C3 9E

C3 9F

C3 A0

C3 A1

C3 A2

C3 A3

C3 A4

C3 A5

C3 A6

C3 A7

C3 A8

C3 A9

C3 AA

C3 AB

C3 AC

C3 AD

C3 AE

C3 AF

C3 B0

C3 B1

C3 B2

C3 B3

C3 B4

C3 B5

C3 B6

C3 B7

C3 B8

C3 B9

C3 BA

C3 BB

C3 BC

C3 BD

C3 BE

C3 BF

Adapted from
L<http:E<47>E<47>en.wikipedia.orgE<47>wikiE<47>UTF-8|http://en.wikipedia.org/wiki/UTF-8>

=cut