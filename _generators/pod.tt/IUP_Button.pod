=for comment based on iup-3.2 - http://www.tecgraf.puc-rio.br/iup/en/elem/iupbutton.html

[% h.name %]

[% n.iupbutton %]

[% h.desc %]

GUI element that is a button. When selected, this
element activates a function in the application. Its visual
presentation can contain a text and/or an image.

=begin HTML

[% html.iupbutton %]

=end HTML

NOTE: The buttons with image and text simultaneous have PADDING '5x5', the
other buttons have no padding. The buttons with no text and BGCOLOR
defined have their RASTERSIZE set.

[% h.usage %]

[% h.create %]

Simple button with text:

 my $button = IUP::Button->new( TITLE=>'Click me' );

Button with image:

 my $img = IUP::Image->new( file=>'icon.png' );
 my $button = IUP::Button->new( IMAGE=>$img );

Button with both text and image:

 my $img = IUP::Image->new( file=>'icon.png' );
 my $button = IUP::Button->new( TITLE=>'Click', IMAGE=>$img );

Button with a image from build-in ImageLibrary - see L<Manual::ImageLibrary|Manual::ImageLibrary>: 

 my $button = IUP::Button->new( IMAGE=>'IUP_Cancel' );

Color button with background color set:

 my $button1 = IUP::Button->new( BGCOLOR=>"0 200 0" ); #defined by RGB values
 my $button2 = IUP::Button->new( BGCOLOR=>IUP_RED );   #build-in constant
 
B<Returns:> the identifier of the created element, or C<undef> if an error occurs.

[% txt.new_attr %]

[% h.at %]

[% txt.at_intro %]

=over

=item B<ALIGNMENT>

I<(non inheritable)>

Horizontal and vertical alignment.
Possible values: "ALEFT", "ACENTER" and "ARIGHT", combined to "ATOP",
"ACENTER" and "ABOTTOM". Default: "ACENTER:ACENTER". Partial values are
also accepted, like "ARIGHT" or ":ATOP", the other value will be used
from the current alignment. In Motif, vertical alignment is restricted
to "ACENTER". 

=item L<BGCOLOR|[%m.at%]/BGCOLOR>

Background color. 
BGCOLOR is ignored always when FLAT=YES because it will inherit from the
native parent. If text and image are not defined, the BGCOLOR is used to
show a color not necessary as a background color of the button, in this case
set the button size because the natural size will be very small. In
Windows, when using the Windows driver or the GTK driver, the BGCOLOR
attribute is ignored if text or image is defined. Default: the global
attribute DLGBGCOLOR.

=item B<CANFOCUS>

I<(creation only, non inheritable)>

Enables the focus
traversal of the control. In Windows the button will respect CANFOCUS
in opposite to the other controls. Default: YES. 

=item B<FLAT>

I<(creation only)>

Hides the button borders until the mouse enter the button area. Can be YES or NO.

=item L<FGCOLOR|[%m.at%]/FGCOLOR>

Text color. Default: the global attribute DLGFGCOLOR.

=item B<IMAGE>

I<(non inheritable)>

Image name or L<IUP::Image> reference. If set before map defines the
behavior of the button to contain an image. The natural size will be
size of the image in pixels, plus the button borders. 

See - L<Using Images in Other Elements (via IMAGE Attribute)|IUP::Image/"Using Images in Other Elements (via IMAGE Attribute)">

If TITLE is also defined and not empty both will be shown (except in
Motif). (GTK 2.6)

=item B<IMINACTIVE>

I<(non inheritable)>

Image name of the element when
inactive. If it is not defined then the IMAGE is used and the colors
will be replaced by a modified version of the background color creating
the disabled effect. GTK will also change the inactive image to look
like other inactive objects. (GTK 2.6)

=item B<IMPRESS>

I<(non inheritable)>

Image name of the pressed button. If
IMPRESS and IMAGE are defined, the button borders are not shown and not
computed in size computation. When the button is clicked the pressed
image does not offset. In Motif the button will lose its focus feedback
also. (GTK 2.6)

=item B<IMPRESSBORDER>

I<(non inheritable)>

If enabled the button borders will
be shown and computed even if IMPRESS is defined. Can be "YES" or "NO".
Default: "NO".

=item B<IMAGEPOSITION>

I<(non inheritable)>

Position of the image relative to
the text when both are displayed. Can be: LEFT, RIGHT, TOP, BOTTOM.
Default: LEFT.  (GTK 2.10)

=item B<MARKUP>

I<(GTK only)>

allows the title string to contains pango markup
commands. Works only if a mnemonic is NOT defined in the title. Can be
"YES" or "NO". Default: "NO".

=item B<PADDING>

internal margin. Works just like the MARGIN attribute of
the L<IUP::Hbox|IUP::Hbox> and L<IUP::Vbox|IUP::Vbox> containers, but uses a different name to
avoid inheritance problems. Default value: "0x0". 

=item B<SPACING>

I<(creation only)>

defines the spacing between the image
associated and the button's text. Default: "2".

=item L<TITLE|[%m.at%]/TITLE>

I<(non inheritable)>

Button's text. If
IMAGE is not defined before map, then the default behavior is to
contain only a text. The button behavior can not be changed after map.
The natural size will be larger enough to include all the text in the
selected font, even using multiple lines, plus the button borders. The
'\n' character is accepted for line change. The "&" character can be
used to define a mnemonic, the next character will be used as key. Use
"&&" to show the "&" character instead on defining a mnemonic. The
button can be activated from any control in the dialog using the
"Alt+key" combination. (mnemonic support since iup-3.0)

=back

[% txt.at_common %]

=over

=item * L<ACTIVE|[%m.at%]/ACTIVE>,
L<FONT|[%m.at%]/FONT>,
L<EXPAND|[%m.at%]/EXPAND>,
L<SCREENPOSITION|[%m.at%]/SCREENPOSITION>,
L<POSITION|[%m.at%]/POSITION>,
L<MINSIZE|[%m.at%]/MINSIZE>,
L<MAXSIZE|[%m.at%]/MAXSIZE>,
L<WID|[%m.at%]/WID>,
L<TIP|[%m.at%]/TIP>,
L<SIZE|[%m.at%]/SIZE>,
L<RASTERSIZE|[%m.at%]/RASTERSIZE>,
L<ZORDER|[%m.at%]/ZORDER>,
L<VISIBLE|[%m.at%]/VISIBLE>

=back

[% h.cb %]

[% txt.cb_intro %]

=over

=item L<ACTION|[%m.at%]/ACTION>

Action generated when the button 1
(usually left) is selected. This callback is called only after the
mouse is released and when it is released inside the button area.

[%h.at_handler%]

 sub action_handler {
   my ($self) = @_;
   #...
 }

B<$self:> reference to the element (IUP::Button) that activated the event

B<Returns:> IUP_CLOSE will be processed.

=item L<BUTTON_CB|[%mat%]/BUTTON_CB>

Action generated when any mouse button is pressed and released.

For more details see L<generic description of BUTTON_CB|[%mat%]/BUTTON_CB> callback.

=back

[%txt.cb_common%]

=over

=item * L<MAP_CB|[%m.cb%]/MAP_CB>,
L<UNMAP_CB|[%m.cb%]/UNMAP_CB>,
L<GETFOCUS_CB|[%m.cb%]/GETFOCUS_CB>,
L<KILLFOCUS_CB|[%m.cb%]/KILLFOCUS_CB>,
L<ENTERWINDOW_CB|[%m.cb%]/ENTERWINDOW_CB>,
L<LEAVEWINDOW_CB|[%m.cb%]/LEAVEWINDOW_CB>,
L<K_ANY|[%m.cb%]/K_ANY>,
L<HELP_CB|[%m.cb%]/HELP_CB>

=back

[% h.notes %]

Buttons with images and/or texts can not change its behavior after
mapped. This is a creation dependency. But after creation the image can
be changed for another image, and the text for another text.

Buttons are activated using Enter or Space keys.

[% h.examples %]

[% IF examples.iupbutton %]
The element B<IUP::Button> is used in the following sample scripts:

=over
[%FOREACH e IN examples.iupbutton %]
=item * L<[%e.pl%]|[%url.examples%][%e.pl%]>[%e.desc%]
[%END%]
=back 

[%ELSE%]
Unfortunately there are no sample scripts using this element.

[%END%]

[% h.see %]

L<IUP::Image|IUP::Image>, L<IUP::Toggle|IUP::Toggle>, L<IUP::Button|IUP::Button>

[%IF flags.gennerate_origdoc -%]
The original doc: L<iupbutton.html|[%url.iuporigdoc%]elem/iupbutton.html>
[%END%]

=cut