=for comment based on iup-3.9 - http://www.tecgraf.puc-rio.br/iup/en/elem/iupgridbox.html

[% h.name %]

[% n.iupgridbox %]

[% h.desc %]

Creates a void container for composing elements in a regular grid. It
is a box that arranges the elements it contains from top to bottom and
from left to right, but can distribute the elements in lines or in
columns.

The child elements are added to the control just like a L<IUP::Vbox> and L<IUP::Hbox>,
sequentially. Then they are distributed accordingly the attributes
ORIENTATION and NUMDIV. When ORIENTATION=HORIZONTAL children are
distributed from left to right on the first line until NUMDIV, then on
the second line, and so on. When ORIENTATION=VERTICAL children are
distributed from top to bottom on the first column until NUMDIV, then
on the second column, and so on. The number of lines and the number of
columns can be easily obtained from the combination of these
attributes:

  if ($g->ORIENTATION eq 'HORIZONTAL') {
    $num_lin = $child_count / $g->NUMDIV;
    $num_col = $g->NUMDIV;
  }
  else {
    $num_lin = $g->NUMDIV;
    $num_col = $child_count / $g->NUMDIV;
  }

Notice that the total number of spaces can be larger than the number of
actual children, the last line or column can be incomplete.

The column sizes will be based only on the width of the children of the
reference line, usually line 0. The line sizes will be based only on
the height of the children of the reference column, usually column 0.

It does not have a native representation.

=begin HTML

[% html.iupgridbox %]

=end HTML

[% h.usage %]

[% h.create %]

 #standard way
 my $gridbox = IUP::GridBox->new( child=>[$elem1, $elem2], ANYATTRIBUTE=>'any value' );
  
 #or with just 1 parameter (arrayref)
 my $gridbox = IUP::GridBox->new( [$elem1, $elem2] );

B<child:> (named parameter) List of the references to elements (or just a single element) that 
will be placed in the box. 

B<Returns:> the identifier of the created element, or C<undef> if an error occurs.

[% txt.new_attr %]

[% h.at %]

[%txt.at_intro%]

=over

=item B<ALIGNMENTLIN>

I<(non inheritable)> Vertically aligns the elements
within each line. Possible values: "ATOP", "ACENTER", "ABOTTOM".
Default: "ATOP". The alignment of a single line can also be set using
=item * B<"ALIGNMENTLIN>I<L>B<">, where "L" is the line index, starting at 0
from top to bottom.

=item B<ALIGNMENTCOL>

I<(non inheritable)> Horizontally aligns the elements
within each column. Possible values: "ALEFT", "ACENTER", "ARIGHT".
Default: "ALEFT". The alignment of a single column can also be set
using B<"ALIGNMENTCOL>I<C>B<">, where "C" is the column index, starting
at 0 from left to right.

=item L<EXPAND|[%m.at%]/EXPAND>

I<(non inheritable*)> The default value is "YES". See the documentation of the attribute for EXPAND
inheritance.

=item B<EXPANDCHILDREN>

I<(non inheritable)> forces all children to expand in
the given direction and to fully occupy its space available inside the
box. Can be YES (both directions), HORIZONTAL, VERTICAL or NO. Default:
"NO". This has the same effect as setting EXPAND on each child, but the
box expansion will not be affected.

=item B<GAPLIN, CGAPLIN>

Defines a vertical space in pixels between lines,
=item * B<CGAPLIN> is in the same units of the B<SIZE> attribute for the
height. Default "0".

=item B<GAPCOL, CGAPCOL>

Defines a horizontal space in pixels between
columns, B<CGAPCOL> is in the same units of the B<SIZE> attribute for
the height. Default: "0".

=item B<NGAPLIN, NCGAPLIN, NGAPCOL, NCGAPCOL>

I<(non inheritable)> Same as B<*GAP*> but are non inheritable.

=item B<HOMOGENEOUSLIN>

I<(non inheritable)> forces all lines to have the same
vertical space, or height. The line height will be based on the highest
child of the reference line (See B<SIZELIN>). Default: "NO". Notice
that this does not changes the children size, only the available space
for each one of them to expand.

=item B<HOMOGENEOUSCOL>

I<(non inheritable)> forces all columns to have the
same horizontal space, or width. The column width will be based on the
largest child of the reference column (See B<SIZECOL>). Default: "NO".
Notice that this does not changes the children size, only the available
space for each one of them to expand.

=item B<MARGIN, CMARGIN>

Defines a margin in pixels, B<CMARGIN >is in the
same units of the B< SIZE> attribute. Its value has the format
"I<width>xI<height>", where I< width> and I<height> are integer values
corresponding to the horizontal and vertical margins, respectively.
Default: "0x0" (no margin).

=item B<NMARGIN, NCMARGIN>

I<(non inheritable)> Same as B<MARGIN> but are non
inheritable.

=item B<NUMDIV>

controls the number of divisions along the distribution
according to ORIENTATION. When ORIENTATION=HORIZONTAL, NUMDIV is the
number of columns, when ORIENTATION=VERTICAL, NUMDIV is the number of
lines. When value is AUTO, its actual value will be calculated to fit
the maximum number of elements in the orientation direction. Default:
AUTO.

=item B<NUMCOL>

I<(read-only)> returns the number of columns.

=item B<NUMLIN>

I<(read-only)> returns the number of lines.

=item B<NORMALIZESIZE>

I<(non inheritable)> normalizes all children natural
size to be the biggest natural size among the reference line and the
reference column. All natural width will be set to the biggest width,
and all natural height will be set to the biggest height according to
is value. Can be NO, HORIZONTAL, VERTICAL or BOTH. Default: "NO". Same
as using L<IUP::Normalizer|IUP::Normalizer>.

=item B<ORIENTATION>

I<(non inheritable)> controls the distribution of the
children in lines or in columns. Can be: HORIZONTAL or VERTICAL.
Default: HORIZONTAL.

=item B<SIZECOL>

I<(non inheritable)> index of the column that will be used as
reference when calculating the height of the lines. Default: 0.

=item B<SIZELIN>

I<(non inheritable)> index of the line that will be used as
reference when calculating the width of the columns. Default: 0.

=item B<WID>

I<(read-only)> returns -1 if mapped.

=back

[%txt.at_common%]

=over

=item * L<SIZE|[%m.at%]/SIZE>,
L<RASTERSIZE|[%m.at%]/RASTERSIZE>,
L<FONT|[%m.at%]/FONT>,
L<CLIENTSIZE|[%m.at%]/CLIENTSIZE>,
L<CLIENTOFFSET|[%m.at%]/CLIENTOFFSET>,
L<POSITION|[%m.at%]/POSITION>,
L<MINSIZE|[%m.at%]/MINSIZE>,
L<MAXSIZE|[%m.at%]/MAXSIZE>

=back

Attributes B<at children only>:

=over

=item L<FLOATING|[%m.at%]/FLOATING>

I<(non inheritable)> If a child has FLOATING=YES then its size and position
will be ignored by the layout processing. Default: "NO".

=back

[% h.notes %]

The box can be created with no elements and be dynamic filled using
L<Append|[%m.elem%]/"Append()"> or L<Insert|[%m.elem%]/"Insert()">.

The box will NOT expand its children, it will allow its children to
expand according to the space left in the box parent. So for the
expansion to occur, the children must be expandable with EXPAND!=NO,
and there must be room in the box parent.

[% h.examples %]

[% IF examples.iupgridbox %]
The element B<IUP::GridBox> is used in the following sample scripts:

=over
[%FOREACH e IN examples.iupgridbox %]
=item * L<[%e.pl%]|[%url.examples%][%e.pl%]>[%e.desc%]
[%END%]
=back 

[%ELSE%]
Unfortunately there are no sample scripts using this element.

[%END%]

[% h.see %]

L<IUP::Vbox|IUP::Vbox>, L<IUP::Hbox|IUP::Hbox>

[%IF flags.gennerate_origdoc -%]
The original doc: L<iupgridbox.html|[%url.iuporigdoc%]elem/iupgridbox.html>
[%END%] 

=cut