=for comment based on iup-3.2 - http://www.tecgraf.puc-rio.br/iup/en/ctrl/iupcells.html

[% h.name %]

[% n.iupcells %]

[% h.desc %]

Creates a grid widget (set of cells) that enables several
application-specific drawing, such as: chess tables, tiles editors,
degrade scales, drawable spreadsheets and so forth.

This element is mostly based on application callbacks functions that
determine the number of cells (rows and coluns), their appearence and
interation. This mechanism offers full flexibility to applications, but
requires programmers attention to avoid infinite loops inside this
functions. Using callbacks, cells can be also grouped to form major or
hierarchical elements, such as headers, footers etc. This callback
approach was intentionally chosen to allow all cells to be dinamically
and directly changed based on application's data structures. Since the
size of each cell is given by the application the size of the control
also must be given using SIZE or RASTERSIZE attributes.

=begin HTML

[% html.iupcells %]

=end HTML

[% h.usage %]

[% h.create %]

 my $cells = IUP::Cells->new( BOXED=>'NO', RASTERSIZE=>'400x300' );

=over

B<Returns:> the identifier of the created element, or C<undef> if an error occurs.

[% txt.new_attr %]

=back

[% h.at %]

[%txt.at_intro%]

=over

=item B<BOXED>

Determines if the bounding cells' regions should be drawn
with black lines. It can be "YES" or "NO". Default: "YES". If the span
atributtes are used, set this attribute to "NO" to avoid grid drawing
over spanned cells.

=item B<BUFFERIZE>

Disables the automatic redrawing of the control, so many
attributes can be changed without many redraws. When set to "NO" the
control is redrawn. When REPAINT attribute is set, BUFFERIZE is
automatically set to "NO". Default: "NO".

=item B<CANVAS>

I<(read-only, non inheritable)>

Returns the internal CD canvas (reference to L<IUP::Canvas>). ZZZ-test-this
This attribute should be used only in specific cases and by experienced programmers.

=item B<CLIPPED>

Determines if, before cells drawing, each bounding region
should be clipped. This attribute should the changed in few specific
cases. It can be "YES" or "NO". Default: "YES".

=item B<FIRST_COL>

I<(read-only, non inheritable)>

Returns the number of the first visible column.

=item B<FIRST_LINE>

I<(read-only, non inheritable)>

Returns the number of the first visible line.

=item B<FULL_VISIBLE>

I<(write-only, non inheritable)>

Tries to show
completely a specific cell (considering any vertical or horizontal
header or scrollbar position). This attribute is set by a formatted
string "%d:%d" (C syntax), where each "%d" represent the line and
column integer indexes respectively.

=item B<IMAGE_CANVAS>

I<(read-only, non inheritable)>

Returns the internal image CD canvas (reference to L<IUP::Canvas>) ZZZ-test-this
This attribute should be used only in specific cases and by experienced programmers.

=item B<LIMITS(L):(C)>

I<(read-only, non inheritable)>

Where (L) is the line number and (C) the column number - e.g. "LIMITS11:25". 
Returns the limits of a given cell. Output format is a string "xmin:xmax:ymin:ymax".

=item B<NON_SCROLLABLE_LINES>

Determines the number of non-scrollable lines
(vertical headers) that should always be visible despite the vertical
scrollbar position. It can be any non-negative integer value. Default: "0"

=item B<NON_SCROLLABLE_COLS>

Determines the number of non-scrollable columns
(horizontal headers) that should always be visible despite the
horizontal scrollbar position. It can be any non-negative integer
value. Default: "0"

=item B<ORIGIN>

Sets the first visible line and column positions. This
attribute is set by a formatted string "%d:%d" (C syntax), where each
"%d" represent the line and column integer indexes respectively.

=item B<REPAINT>

I<(write-only, non inheritable)>

When set with any value, provokes the control to be redrawn.

=item L<SIZE|[%m.at%]/SIZE>

I<(non inheritable)>

There is no initial size. You must define SIZE or RASTERSIZE.

=item L<SCROLLBAR|[%m.at%]/SCROLLBAR>

I<(creation only)>

Default: "YES".

=back

[%txt.at_common%]

=over

=item * L<ACTIVE|[%m.at%]/ACTIVE>,
L<BGCOLOR|[%m.at%]/BGCOLOR>, L<FONT|[%m.at%]/FONT>,
L<X|[%m.at%]/X>, L<Y|[%m.at%]/Y>,
L<POSITION|[%m.at%]/POSITION>,
L<MINSIZE|[%m.at%]/MINSIZE>,
L<MAXSIZE|[%m.at%]/MAXSIZE>, L<WID|[%m.at%]/WID>,
L<TIP|[%m.at%]/TIP>, L<SIZE|[%m.at%]/SIZE>,
L<RASTERSIZE|[%m.at%]/RASTERSIZE>,
L<ZORDER|[%m.at%]/ZORDER>,
L<VISIBLE|[%m.at%]/VISIBLE>

=back

[% h.cb %]

[%txt.cb_intro%]

=over

=item B<DRAW_CB>

Called when a specific cell needs to be redrawn.

[%h.at_handler%]

 sub draw_cb_handler {
   my ($self, $line, $column, $xmin, $xmax, $ymin, $ymax, $canvas) = @_;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event

B<$line>, B<$column> - the grid position inside the control that is being
redrawn, in grid coordinates.

B<$xmin, $xmax, $ymin, $ymax> - the raster bounding box of the redrawn
cells, where the application can use CD functions to draw anything. If
the attribute IUP_CLIPPED is set (the default), all CD graphical
primitives is clipped to the bounding region.

B<$canvas> - internal canvas CD used to draw the cells.

=back

=item B<HEIGHT_CB>

Called when the controls needs to know a (eventually new) line height.

[%h.at_handler%]

 sub height_cb_handler {
   my ($self, $line) = @_;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event

B<$line> - the line index

B<Returns> - an integer that specifies the desired height (in pixels).
Default is 30 pixels.

=back

=item B<HSPAN_CB>

Called when the control needs to know if a cell should be horizontally spanned.

[%h.at_handler%]

 sub hspan_cb_handler {
   my ($self, $line, $column) = @_;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event

B<$line, $column> - the line and column indexes (in grid coordinates)

B<Returns> - an integer that specifies the desired span.
Default is 1 (no span).

=back

=item B<MOUSECLICK_CB>

Called when a color is selected. The primary color is selected with
the left mouse button, and if existent the secondary is selected with
the right mouse button.

[%h.at_handler%]

 sub mouseclick_cb_handler {
   my ($self, $button, $pressed, $line, $column, $x, $y, $status) = @_;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event

B<$button, $pressed, $x, $y, $status> - same as the L<BUTTON_CB|[%m.cb%]/BUTTON_CB> by L<IUP::Canvas>.

B<$line, $column> - the grid position in the control where the event
has occurred, in grid coordinates.

=back

=item B<MOUSEMOTION_CB>

Called when the mouse moves over the control.

[%h.at_handler%]

 sub mousemotion_cb_handler {
   my ($self, $line, $column, $x, $y, $status) = @_;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event

B<$x, $y, $status> - same as the L<MOTION_CB|[%m.cb%]/MOTION_CB> by L<IUP::Canvas>.

B<$line, $column> - the grid position in the control where the event
has occurred, in grid coordinates.

=back

=item B<NCOLS_CB>

Called when then controls needs to know its number of
columns.

[%h.at_handler%]

 sub ncols_cb_handler {
   my $self = shift;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event.

B<Returns> - an integer that specifies the number of columns.
Default is 10 columns.

=back

=item B<NLINES_CB>

Called when then controls needs to know its number of lines.

[%h.at_handler%]

 sub nlines_cb_handler {
   my $self = shift;
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event.

B<Returns> - an integer that specifies the number of lines.
Default is 10 lines.

=back

=item B<SCROLLING_CB>

Called when the scrollbars are activated.

[%h.at_handler%]

 sub scrolling_cb_handler {
   my ($self, $line, $column) = @_
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event.

B<$line, $column> - the first visible line and column indexes
(in grid coordinates).

B<Returns> - if IUP_IGNORE the cell is not redrawn. By default the cell is
always redrawn.

=back

=item B<VSPAN_CB>

Called when the control needs to know if a cell should
be vertically spanned.

[%h.at_handler%]

 sub vspan_cb_handler {
   my ($self, $line, $column) = @_
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event.

B<$line, $column> - the line and column indexes (in grid coordinates).

B<Returns> - an integer that specifies the desired span.
Default is 1 (no span).

=back

=item B<WIDTH_CB>

Called when the controls needs to know the column width.

[%h.at_handler%]

 sub width_cb_handler {
   my ($self, $column) = @_
   #...
 }

=over

B<$self> - reference to the element (IUP::Cells) that activated the event.

B<$column> - the column index.

B<Returns> - an integer that specifies the desired width (in pixels).
Default is 60 pixels.

=back

=back

[%txt.cb_common%]

=over

=item * L<MAP_CB|[%m.cb%]/MAP_CB>, L<UNMAP_CB|[%m.cb%]/UNMAP_CB>,
L<GETFOCUS_CB|[%m.cb%]/GETFOCUS_CB>, L<KILLFOCUS_CB|[%m.cb%]/KILLFOCUS_CB>,
L<ENTERWINDOW_CB|[%m.cb%]/ENTERWINDOW_CB>, L<LEAVEWINDOW_CB|[%m.cb%]/LEAVEWINDOW_CB>,
L<K_ANY|[%m.cb%]/K_ANY>, L<HELP_CB|[%m.cb%]/HELP_CB>

=back

[% h.examples %]

[% IF examples.iupcells %]
The element B<IUP::Cells> is used in the following sample scripts:

=over
[%FOREACH e IN examples.iupcells %]
=item * L<[%e.pl%]|[%url.examples%][%e.pl%]>[%e.desc%]
[%END%]
=back 

[%ELSE%]
Unfortunately there are no sample scripts using this element.

[%END%]

[% h.see %]

L<IUP::Canvas|IUP::Canvas>

[%IF flags.gennerate_origdoc -%]
The original doc: L<iupcells.html|[%url.iuporigdoc%]ctrl/iupcells.html>
[%END%] 

=cut