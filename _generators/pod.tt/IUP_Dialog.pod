=for comment based on iup-3.5 - http://www.tecgraf.puc-rio.br/iup/en/dlg/iupdialog.html

[% h.name %]

[% n.iupdialog %]

[% h.desc %]

Creates a dialog element. It manages user interaction with the
interface elements. For any interface element to be shown, it must be
encapsulated in a dialog.

=begin HTML

[% html.iupdialog %]

=end HTML

[% h.usage %]

[% h.create %]

 $dialog = IUP::Dialog->new( TITLE=>"Windows title", $child=>$frame_element );

B<$child>: Identifier of an interface element. The dialog has only one child.

B<Returns:> the identifier of the created element, or C<undef> if an error occurs.

[% txt.new_attr %]

[% h.at %]

[%txt.at_intro%]

=head2 Common

=over

=item B<BACKGROUND>

I<(non inheritable)>

Dialog background color or image. Can be a non inheritable alternative to BGCOLOR or can be the name of an
image to be tiled on the background. See also the screenshots:

=begin HTML

[%html.iupdialog_background%]

=end HTML

=item B<BORDER>

I<(non inheritable) (creation only)>

Shows a resize border
around the dialog. Default: "YES". BORDER=NO is useful only when
RESIZE=NO, MAXBOX=NO, MINBOX=NO, MENUBOX=NO and TITLE=NULL, if any of
these are defined there will be always some border.

=item L<CURSOR|[%m.at%]/CURSOR>

I<(non inheritable)>

Defines a cursor
for the dialog.

=item B<DRAGDROP>

I<[Windows and GTK Only] (non inheritable)>

Enable or disable
the drag&drop of files. Default: NO, but if DROPFILES_CB is defined
when the element is mapped then it will be automatically enabled.

=item L<EXPAND|[%m.at%]/EXPAND>

I<(non inheritable)>

The default
value is "YES".

=item L<SIZE|[%m.at%]/SIZE>

I<(non inheritable)>

Dialogs size.
Additionally the following values can also be defined for width and/or
height:

=over

=item "FULL": Defines the dialogs width (or height) equal to the
screen's width (or height)

=item "HALF": Defines the dialogs width (or height) equal to half the
screen's width (or height)

=item "THIRD": Defines the dialogs width (or height) equal to 1/3 the
screen's width (or height)

=item "QUARTER": Defines the dialogs width (or height) equal to 1/4
of the screen's width (or height)

=item "EIGHTH": Defines the dialogs width (or height) equal to 1/8 of
the screen's width (or height)

=back

The dialog B<Natural> size is only considered when the B<User> size is
not defined or when it is bigger than the B<Current> size. This
behavior is different from a control that goes inside the dialog.
Because of that, when SIZE or RASTERSIZE are set (changing the B<User>
size), the B<Current> size is internally reset to 0x0, so the the
=item B<Natural> size can be considered when re-computing the B<Current> size
of the dialog.

Values set at SIZE or RASTERSIZE attributes of a dialog are always
accepted, regardless of the minimum size required by its children. For
a dialog to have the minimum necessary size to fit all elements
contained in it, simply define SIZE or RASTERSIZE to NULL. Also if you
set SIZE or RASTERSIZE to be used as the initial size of the dialog,
its contents will be limited to this size as the minimum size, if you
do not want that, then after showing the dialog reset this size to NULL
so the dialog can be resized to smaller values. But notice that its
contents will still be limited by the B<Natural> size, to also remove
that limitation set SHRINK=YES.

For more information see L<[%m.dlg%]>.

=item L<TITLE|[%m.at%]/TITLE>

I<(non inheritable)>

Dialogs title.
Default: NULL. If you want to remove the title bar you must also set
MENUBOX=NO, MAXBOX=NO and MINBOX=NO, before map. But in Motif and GTK
it will hide it only if RESIZE=NO also.

=item L<VISIBLE|[%m.at%]/VISIBLE>

Simply call L<Show|[%m.elem%]/"Show()"> or L<Hide|[%m.elem%]/"Hide()"> for the dialog.

=back

[%txt.at_common%]

=over

=item * L<ACTIVE|[%m.at%]/ACTIVE>,
L<BGCOLOR|[%m.at%]/BGCOLOR>, L<FONT|[%m.at%]/FONT>,
L<EXPAND|[%m.at%]/EXPAND>,
L<SCREENPOSITION|[%m.at%]/SCREENPOSITION>,
L<WID|[%m.at%]/WID>, L<TIP|[%m.at%]/TIP>,
L<CLIENTSIZE|[%m.at%]/CLIENTSIZE>,
L<RASTERSIZE|[%m.at%]/RASTERSIZE>,
L<ZORDER|[%m.at%]/ZORDER>

Note that ACTIVE, BGCOLOR and FONT will also affect all the controls inside the dialog.

=back

=head2 Exclusive

=over

=item B<DEFAULTENTER>

Name of the button activated when the user press Enter when focus is in another control of the dialog.

To associate a name to element use L<SetName|/"SetName()"> or C<< name=>'ElemName' >> named parameter of L<new()|/"new()"> constructor.

=item B<DEFAULTESC>

Name of the button activated when the user press Esc when focus is in another control of the dialog.

To associate a name to element use L<SetName|/"SetName()"> or C<< name=>'ElemName' >> named parameter of L<new()|/"new()"> constructor.

=item B<DIALOGFRAME>

Set the common decorations for modal dialogs. This
means RESIZE=NO, MINBOX=NO and MAXBOX=NO. In Windows, if the
PARENTDIALOG is defined then the MENUBOX is also removed, but the Close
button remains.

=item L<ICON|[%m.at%]/ICON>

Dialogs icon.

=item B<FULLSCREEN>

Makes the dialog occupy the whole screen over any system
bars in the main monitor. All dialog details, such as title bar,
borders, maximize button, etc, are removed. 

Possible values "YES", "NO".
In Motif you may have to click in the dialog to set its focus.

In Motif if set to YES when the dialog is hidden, then it can not be
changed after it is visible.

=item B<HWND>

I<[Windows Only] (non inheritable, read-only)> Returns the
Windows Window handle. Available in the Windows driver or in the GTK
driver in Windows.

=item B<MAXBOX>

I<(creation only)> Requires a maximize button from the window
manager. If RESIZE=NO then MAXBOX will be set to NO. Default: YES. In
Motif the decorations are controlled by the Window Manager and may not
be possible to be changed from IUP. In Windows MAXBOX is hidden only if
MINBOX is hidden as well, or else it will be just disabled.

=item B<MAXSIZE>

Maximum size for the dialog in raster units (pixels). The
windowing system will not be able to change the size beyond this limit.
Default: 65535x65535. 

=item B<MENU>

Name of a menu or L<IUP::Menu> reference. Associates a menu to the dialog as a menu bar.
The previous menu, if any, is unmapped.

=item B<MENUBOX>

I<(creation only)> Requires a system menu box from the window
manager. If hidden will also remove the Close button. Default: YES. In
Motif the decorations are controlled by the Window Manager and may not
be possible to be changed from IUP. In Windows if hidden will hide also
MAXBOX and MINBOX.

=item B<MINBOX>

I<(creation only)> Requires a minimize button from the window
manager. Default: YES. In Motif the decorations are controlled by the
Window Manager and may not be possible to be changed from IUP. In
Windows MINBOX is hidden only if MAXBOX is hidden as well, or else it
will be just disabled.

=item B<MINSIZE>

Minimum size for the dialog in raster units (pixels). The
windowing system will not be able to change the size beyond this limit.
Default: 1x1. Some systems define a very minimum size greatter than
this. Typically Windows has an horizontal minimum size that includes
the window decoration buttons. 

=item B<MODAL>

I<(read-only)> Returns the popup state. It is "YES" if the
dialog was shown using L<Popup|[%m.elem%]/"Popup()">. It is "NO" if L<Show|[%m.elem%]/"Show()"> was used
or it is not visible. 

=item B<NATIVEPARENT>

I<(creation only)> Native handle of a dialog to be used
as parent. Used only if PARENTDIALOG is not defined.

=item L<PARENTDIALOG|[%m.at%]/PARENTDIALOG>

I<(creation only)> Name of a dialog to be used as parent.

=item B<PLACEMENT>

Changes how the dialog will be shown. Values:
"FULL", "MAXIMIZED", "MINIMIZED" and "NORMAL". Default: NORMAL. After
L<Show|[%m.elem%]/"Show()">/L<Popup|[%m.elem%]/"Popup()"> the attribute is set back to "NORMAL". FULL is
similar to FULLSCREEN but only the dialog client area covers the screen
area, menu and decorations will be there but out of the screen. In UNIX
there is a chance that the placement won't work correctly, that depends
on the Window Manager.

=item B<RESIZE>

I<(creation only)> Allows interactively changing the dialogs
size. Default: YES. If RESIZE=NO then MAXBOX will be set to NO. In
Motif the decorations are controlled by the Window Manager and may not
be possible to be changed from IUP.

=item B<SAVEUNDER>

I<[Windows and Motif Only] (creation only)> When this
attribute is true (YES), the dialog stores the original image of the
desktop region it occupies (if the system has enough memory to store
the image). In this case, when the dialog is closed or moved, a
redrawing event is not generated for the windows that were shadowed by
it. Its default value is YES. To save memory disable it for your main
dialog. Not available in GTK.

=item L<SHRINK|[%m.at%]/SHRINK>

Allows changing the elements
distribution when the dialog is smaller than the minimum size. Default:
NO.

=item B<STARTFOCUS>

Name of the element that must receive the focus right
after the dialog is shown using L<Show|[%m.elem%]/"Show()"> or L<Popup|[%m.elem%]/"Popup()">. If not
defined then the first control than can receive the focus is selected
(same effect of calling L<NextField|[%m.elem%]/"NextField()"> for
the dialog). Updated after SHOW_CB is called and only if the focus was
not changed during the callback.

=item B<XWINDOW>

I<[UNIX Only] (non inheritable, read-only)> Returns the
X-Windows Window (Drawable). Available in the Motif driver or in the
GTK driver in UNIX.

=back

=head2 Exclusive [Windows and GTK Only]

=over

=item B<ACTIVEWINDOW>

I<[Windows and GTK Only] (read-only)> informs if the
dialog is the active window (the window with focus). Can be Yes or No.
(since iup-3.4)

=item B<HIDETASKBAR>

I<[Windows and GTK Only] (write-only)> Action attribute
that when set to "YES", hides the dialog, but does not decrement the
visible dialog count, does not call SHOW_CB and does not mark the
dialog as hidden inside IUP. It is usually used to hide the dialog and
keep the tray icon working without closing the main loop. It has the
same effect as setting LOCKLOOP=Yes and normally hiding the dialog.
IMPORTANT: when you hide using HIDETASKBAR, you must show using
HIDETASKBAR also. Possible values: YES, NO.

=item B<OPACITY>

I<[Windows and GTK Only]> sets the dialog transparency alpha
value. Valid values range from 0 (completely transparent) to 255
(opaque). In Windows set to NULL to remove the LAYERED style bit. (GTK
2.12)

=item B<TOPMOST>

I<[Windows and GTK Only]> puts the dialog always in front of
all other dialogs in all applications. Default: NO.

=item B<TRAY>

I<[Windows and GTK Only]> When set to "YES", displays an icon on the system tray. (GTK 2.10)

=item B<TRAYIMAGE>

I<[Windows and GTK Only]> Name of a IUP image to be used as the tray icon. (GTK 2.10)

=item B<TRAYTIP>

I<[Windows and GTK Only]> Tray icon's tooltip text. (GTK 2.10)

=back

=head2 Exclusive [GTK Only]

=over

=item B<DIALOGHINT>

I<(creation-only)> if enabled sets the window type hint to a dialog hint.

=back

=head2 Exclusive [Windows Only]

=over

=item B<BRINGFRONT>

I<[Windows Only] (write-only)> makes the dialog the
foreground window. Use "YES" to activate it. Useful for multithreaded
applications.

=item B<COMPOSITED>

I<[Windows Only] (creation only)> controls if the window
will have an automatic double buffer for all children. Default is "NO".
In Windows Vista it is NOT working as expected.

=item L<CONTROL|[%m.at%]/CONTROL>

I<[Windows Only] (creation only)> Embeds the dialog inside another window.

=item B<HELPBUTTON>

I<[Windows Only] (creation only)> Inserts a help button in
the same place of the maximize button. It can only be used for dialogs
without the minimize and maximize buttons, and with the menu box. For
the next interaction of the user with a control in the dialog, the
callback L<HELP_CB|[%m.cb%]/HELP_CB> will be called instead of
the control defined ACTION callback. Possible values: YES, NO. Default:
NO.

=item B<TOOLBOX>

I<[Windows Only] (creation only)> makes the dialog look like a
toolbar. It is only valid if the PARENTDIALOG or NATIVEPARENT attribute
is also defined. Default: NO.

=back

=head2 Exclusive MDI [Windows Only]

=over

=item B<MDIFRAME>

I<(creation only, non inheritable) [Windows Only]> Configure this dialog as a MDI frame. Can be YES or NO. Default: NO.

=item B<MDIACTIVE>

I<[Windows Only] (read-only)> Returns the name of the
current active MDI child. Use IUP::GetAttributeHandle to directly
retrieve the child handle.

=item B<MDIACTIVATE>

I<[Windows Only] (write-only)> Name of a MDI child window
to be activated. If value is "NEXT" will activate the next window after
the current active window. If value is "PREVIOUS" will activate the
previous one.

=item B<MDIARRANGE>

I<[Windows Only] (write-only)> Action to arrange MDI child
windows. Possible values: TILEHORIZONTAL, TILEVERTICAL, CASCADE and
ICON (arrange the minimized icons).

=item B<MDICLOSEALL>

I<[Windows Only] (write-only)> Action to close and destroy
all MDI child windows. The CLOSE_CB callback will be called for each
child.

IMPORTANT: When a MDI child window is closed it is automatically
destroyed. The application can override this returning IUP_IGNORE in
CLOSE_CB.

=item B<MDINEXT>

I<[Windows Only] (read-only)> Returns the name of the next
available MDI child. Use IUP::GetAttributeHandle to directly retrieve the
child handle. Must use MDIACTIVE to retrieve the first child. If the
application is going to destroy the child retrieve the next child
before destroying the current.

=item B<MDICLIENT>

I<[Windows Only] (non inheritable, creation only)> Configure
the canvas as a MDI client. Can be YES or NO. No callbacks
will be called. This canvas will be used internally only by the MDI
Frame and its MDI Children. The MDI frame must have one and only one
MDI client. Default: NO.

=item B<MDIMENU>

I<(creation only) [Windows Only]> Name of a IUP::Menu to be used
as the Window list of a MDI frame. The system will automatically add
the list of MDI child windows there.

=item B<MDICHILD>

I<(creation only) [Windows Only]> Configure this dialog to be
a MDI child. Can be YES or NO. The PARENTDIALOG attribute must also be
defined. Each MDI child is automatically named if it does not have one.
Default: NO.

=back

[% h.cb %]

[%txt.cb_intro%]

=over

=item L<CLOSE_CB|[%m.cb%]/CLOSE_CB>

Called right before the dialog is closed.

=item B<COPYDATA_CB>

I<[Windows Only]>

Called at the first instance, when a
second instance is running. Must set the global attribute
SINGLEINSTANCE to be called. (since iup-3.2)

[%h.at_handler%]

 sub copydata_cb_handler {
   my ($self, $cmdLine, $size) = @_;
   #...
 }

=over

B<$self:> reference to the element (IUP::Dialog) that activated the event

B<$cmdLine:> command line of the second instance.

B<$size:> size of the command line string including the null character.

=back

=item L<DROPFILES_CB|[%m.cb%]/DROPFILES_CB>

I<[Windows and GTK Only]>

Action generated when one or more files are dropped in the dialog.

=item B<MDIACTIVATE_CB>

I<[Windows Only]>

Called when a MDI child window is
activated. Only the MDI child receive this message. It is not called
when the child is shown for the first time.

[%h.at_handler%]

 sub mdiactivate_cb_handler {
   my ($self) = @_;
   #...
 }

=over

B<$self:> reference to the element (IUP::Dialog) that activated the event

=back

=item B<MOVE_CB>

I<[Windows and GTK Only]>

Called after the dialog was moved on
screen. The coordinates are the same as the L<SCREENPOSITION|[%m.at%]/SCREENPOSITION> attribute. (since iup-3.0)

[%h.at_handler%]

 sub mdiactivate_cb_handler {
   my ($self, $x, $y) = @_;
   #...
 }

=over

B<$self:> reference to the element (IUP::Dialog) that activated the event

B<$x, y:> coordinates of the new position.

=back

=item L<RESIZE_CB|[%m.cb%]/RESIZE_CB>

Action generated when the
dialog size is changed. If returns IUP_IGNORE the dialog layout is NOT
recalculated. 

=item L<SHOW_CB|[%m.cb%]/SHOW_CB>

Called right after the dialog is
showed, hidden, maximized, minimized or restored from
minimized/maximized.

=item B<TRAYCLICK_CB>

I<[Windows and GTK Only]>

Called right after the mouse
button is pressed or released over the tray icon. (GTK 2.10)

[%h.at_handler%]

 sub trayclick_cb_handler {
   my ($self, $but, $pressed, $dclick) = @_;
   #...
 }

=over

B<$self:> reference to the element (IUP::Dialog) that activated the event

B<$but:> identifies the activated mouse button. Can be: 1, 2 or 3. Note
that this is different from the BUTTON_CB canvas callback definition.
GTK does not get button=2 messages.

B<$pressed:> indicates the state of the button. Always 1 in GTK.

B<$dclick:> indicates a double click. In GTK double click is simulated.

B<Returns:> IUP_CLOSE will be processed.

=back

=back

[%txt.cb_common%]

=over

=item * L<MAP_CB|[%m.cb%]/MAP_CB>,
L<UNMAP_CB|[%m.cb%]/UNMAP_CB>,
L<GETFOCUS_CB|[%m.cb%]/GETFOCUS_CB>,
L<KILLFOCUS_CB|[%m.cb%]/KILLFOCUS_CB>,
L<ENTERWINDOW_CB|[%m.cb%]/ENTERWINDOW_CB>,
L<LEAVEWINDOW_CB|[%m.cb%]/LEAVEWINDOW_CB>,
L<K_ANY|[%m.cb%]/K_ANY>, L<HELP_CB|[%m.cb%]/HELP_CB>

=back

[% h.notes %]

Do not associate an L<IUP::Dialog|IUP::Dialog> with the native "dialog" nomenclature
in Windows, GTK or Motif. L<IUP::Dialog|IUP::Dialog> use native standard windows in
all drivers.

Except for the menu, all other elements must be inside a dialog to
interact with the user. Therefore, an interface element will only be
visible if its dialog is also visible.

The order of callback calling is system dependent. For instance, the
RESIZE_CB and the SHOW_CB are called in a different order in Win32 and
in X-Windows when the dialog is shown for the first time.

=head2 Windows MDI

The MDI support is composed of 3 components: the MDI frame window
(IUP::Dialog), the MDI client window (IUP::Canvas) and the MDI children
(IUP::Dialog). Although the MDI client is a IUP::Canvas it is not used
directly by the application, but it must be created and included in the
dialog that will be the MDI frame, other controls can also be available
in the same dialog, like buttons and other canvases composing toolbars
and status area. The following picture illustrates the e components:

=begin HTML

[% html.iupdialog_mdi %]

=end HTML

[% h.examples %]

[% IF examples.iupdialog %]
The element B<IUP::Dialog> is used in the following sample scripts:

=over
[%FOREACH e IN examples.iupdialog %]
=item * L<[%e.pl%]|[%url.examples%][%e.pl%]>[%e.desc%]
[%END%]
=back 

[%ELSE%]
Unfortunately there are no sample scripts using this element.

[%END%]

[% h.see %]

L<IUP::FileDlg|IUP::FileDlg>,
L<IUP::MessageDlg|IUP::MessageDlg>,
L<Destroy|[%m.elem%]/"Destroy()">,
L<ShowXY|[%m.elem%]/"ShowXY>,
L<Show|[%m.elem%]/"Show()">,,
L<Popup|[%m.elem%]/"Popup()">

[%IF flags.gennerate_origdoc -%]
The original doc: L<iupdialog.html|[%url.iuporigdoc%]dlg/iupdialog.html>
[%END%] 

=cut